{
  "components": {
    "responses": {
      "AccountTradesSummaryReturn": {
        "content": {
          "application/json": {
            "schema": {
              "description": "The overall summary and per-token metrics.",
              "properties": {
                "summary": {
                  "description": "Summary of overall trading performance.",
                  "properties": {
                    "averageTradeUsd": {
                      "description": "The average size of trades in USD.",
                      "format": "double",
                      "type": "number"
                    },
                    "bestPerformingToken": {
                      "allOf": [
                        {
                          "description": "Summary of a token's performance.",
                          "properties": {
                            "pnlUsd": {
                              "description": "The profit or loss for the token in USD.",
                              "format": "double",
                              "type": "number"
                            },
                            "tokenAddress": {
                              "description": "The address of token.",
                              "type": "string"
                            },
                            "tokenLogoUrl": {
                              "description": "The logo URL of token (if any).",
                              "nullable": true,
                              "type": "string"
                            },
                            "tokenName": {
                              "description": "The name of token (if any).",
                              "nullable": true,
                              "type": "string"
                            },
                            "tokenSymbol": {
                              "description": "The symbol of token.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "tokenSymbol",
                            "tokenAddress",
                            "pnlUsd"
                          ],
                          "type": "object"
                        }
                      ],
                      "nullable": true
                    },
                    "losingTradesCount": {
                      "description": "The number of trades that resulted in a loss.",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "pnlTrendSevenDays": {
                      "description": "The profit and loss trend over the last seven days.",
                      "items": {
                        "items": {
                          "format": "double",
                          "type": "number"
                        },
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "realizedPnlUsd": {
                      "description": "The total realized profit in USD.",
                      "format": "double",
                      "type": "number"
                    },
                    "tradesCount": {
                      "description": "The total number of trades executed.",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "tradesVolumeUsd": {
                      "description": "The total trading volume in USD.",
                      "format": "double",
                      "type": "number"
                    },
                    "uniqueTokensTraded": {
                      "description": "The count of unique tokens traded by the account.",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "unrealizedPnlUsd": {
                      "description": "The total unrealized profit in USD.",
                      "format": "double",
                      "type": "number"
                    },
                    "winRate": {
                      "description": "The percentage of winning trades (0.0 to 100.0).",
                      "format": "double",
                      "type": "number"
                    },
                    "winningTradesCount": {
                      "description": "The number of trades that resulted in a profit.",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "worstPerformingToken": {
                      "allOf": [
                        {
                          "description": "Summary of a token's performance.",
                          "properties": {
                            "pnlUsd": {
                              "description": "The profit or loss for the token in USD.",
                              "format": "double",
                              "type": "number"
                            },
                            "tokenAddress": {
                              "description": "The address of token.",
                              "type": "string"
                            },
                            "tokenLogoUrl": {
                              "description": "The logo URL of token (if any).",
                              "nullable": true,
                              "type": "string"
                            },
                            "tokenName": {
                              "description": "The name of token (if any).",
                              "nullable": true,
                              "type": "string"
                            },
                            "tokenSymbol": {
                              "description": "The symbol of token.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "tokenSymbol",
                            "tokenAddress",
                            "pnlUsd"
                          ],
                          "type": "object"
                        }
                      ],
                      "nullable": true
                    }
                  },
                  "required": [
                    "winRate",
                    "realizedPnlUsd",
                    "unrealizedPnlUsd",
                    "uniqueTokensTraded",
                    "averageTradeUsd",
                    "tradesCount",
                    "winningTradesCount",
                    "losingTradesCount",
                    "tradesVolumeUsd",
                    "pnlTrendSevenDays"
                  ],
                  "type": "object"
                },
                "tokenMetrics": {
                  "description": "Metrics for a token's trading performance.",
                  "items": {
                    "description": "Metrics for a token's trading performance.",
                    "properties": {
                      "buys": {
                        "description": "Summary metrics for a trade side (buy or sell).",
                        "properties": {
                          "tokenAmount": {
                            "description": "The total volume of tokens traded on this side.",
                            "format": "double",
                            "type": "number"
                          },
                          "transactionCount": {
                            "description": "The number of trades executed on this side.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "volumeUsd": {
                            "description": "The total traded volume expressed in USD on this side.",
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "required": [
                          "volumeUsd",
                          "tokenAmount",
                          "transactionCount"
                        ],
                        "type": "object"
                      },
                      "realizedPnlUsd": {
                        "description": "The total realized profit in USD for this token.",
                        "format": "double",
                        "type": "number"
                      },
                      "sells": {
                        "description": "Summary metrics for a trade side (buy or sell).",
                        "properties": {
                          "tokenAmount": {
                            "description": "The total volume of tokens traded on this side.",
                            "format": "double",
                            "type": "number"
                          },
                          "transactionCount": {
                            "description": "The number of trades executed on this side.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "volumeUsd": {
                            "description": "The total traded volume expressed in USD on this side.",
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "required": [
                          "volumeUsd",
                          "tokenAmount",
                          "transactionCount"
                        ],
                        "type": "object"
                      },
                      "tokenAddress": {
                        "description": "The address of the token.",
                        "type": "string"
                      },
                      "tokenSymbol": {
                        "description": "The symbol of the token.",
                        "type": "string"
                      },
                      "unrealizedPnlUsd": {
                        "description": "The total unrealized profit in USD for this token.",
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "required": [
                      "tokenAddress",
                      "tokenSymbol",
                      "realizedPnlUsd",
                      "unrealizedPnlUsd",
                      "buys",
                      "sells"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "summary",
                "tokenMetrics"
              ],
              "type": "object"
            }
          }
        },
        "description": "The overall summary and per-token metrics."
      },
      "ApiError": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "description": "Code ID of the error, uniquely identifying the error type",
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                  "type": "string"
                },
                "message": {
                  "description": "A human readable message describing the error that occurred.",
                  "type": "string"
                },
                "violations": {
                  "description": "Optional collection of validation violations representations.",
                  "items": {
                    "description": "Main structure to represent any kind of validation violation.",
                    "properties": {
                      "invalidValue": {
                        "description": "Provided value which leaded to the violation.",
                        "nullable": true,
                        "type": "string"
                      },
                      "message": {
                        "description": "Message to the end user.",
                        "type": "string"
                      },
                      "propertyPath": {
                        "description": "Property path to the field where violation occurred.",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "message"
                    ],
                    "type": "object"
                  },
                  "nullable": true,
                  "type": "array"
                }
              },
              "required": [
                "code",
                "message",
                "id"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "Code": {
        "content": {
          "application/json": {
            "schema": {
              "enum": [
                "RangeValidation",
                "InvalidKeySize",
                "InvalidInput",
                "SqlxError",
                "NotEnoughCred",
                "RequestQuotaReached",
                "NotWebSocketSubscription",
                "ClickhouseError",
                "RedisError",
                "InvalidInit",
                "NoResultFound",
                "InvalidResolution",
                "BigQueryError",
                "NoAuthorizationHeader",
                "DeserializationError",
                "ServerError",
                "SlowClient",
                "SlowQuery",
                "InsufficientPermissions",
                "NotFound",
                "WebSocketHandshakeGetMethodRequired",
                "WebSocketHandshakeNoWebsocketUpgrade",
                "WebSocketHandshakeNoConnectionUpgrade",
                "WebSocketHandshakeNoVersionHeader",
                "WebSocketHandshakeUnsupportedVersion",
                "WebSocketHandshakeBadWebsocketKey"
              ],
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "CollectionOwnersResult": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "Amount of NFTs in this collection the address owns",
                        "format": "int64",
                        "type": "integer"
                      },
                      "owner": {
                        "description": "Address of collection owner",
                        "type": "string"
                      }
                    },
                    "required": [
                      "owner",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ConstraintViolation": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Main structure to represent any kind of validation violation.",
              "properties": {
                "invalidValue": {
                  "description": "Provided value which leaded to the violation.",
                  "nullable": true,
                  "type": "string"
                },
                "message": {
                  "description": "Message to the end user.",
                  "type": "string"
                },
                "propertyPath": {
                  "description": "Property path to the field where violation occurred.",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "type": "object"
            }
          }
        },
        "description": "Main structure to represent any kind of validation violation."
      },
      "FetcherReport": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "InstructionName": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "callingInstructions": {
                  "format": "binary",
                  "type": "string"
                },
                "callingProgram": {
                  "type": "string"
                },
                "ixName": {
                  "type": "string"
                },
                "programName": {
                  "type": "string"
                }
              },
              "required": [
                "callingInstructions",
                "ixName",
                "callingProgram",
                "programName"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "InstructionNameList": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "callingInstructions": {
                        "format": "binary",
                        "type": "string"
                      },
                      "callingProgram": {
                        "type": "string"
                      },
                      "ixName": {
                        "type": "string"
                      },
                      "programName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "callingInstructions",
                      "ixName",
                      "callingProgram",
                      "programName"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "JoinedNftResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "certainty": {
                        "description": "Level of confidence for NFT match, a value between 0 and 1",
                        "format": "double",
                        "type": "number"
                      },
                      "collectionAddress": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "collectionName": {
                        "description": "NFT collection name",
                        "type": "string"
                      },
                      "imageUrl": {
                        "description": "NFT image url",
                        "nullable": true,
                        "type": "string"
                      },
                      "mintAddress": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "tokenName": {
                        "description": "NFT token name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ownerAddress",
                      "mintAddress",
                      "collectionAddress",
                      "collectionName",
                      "tokenName",
                      "certainty"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "KnownAccountReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "dateAdded": {
                  "description": "Date added to the database",
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "description": "Account entity, if available",
                  "nullable": true,
                  "type": "string"
                },
                "entityId": {
                  "description": "Account entity ID, if available",
                  "format": "int32",
                  "nullable": true,
                  "type": "integer"
                },
                "labels": {
                  "description": "Account labels, eg: DEFI,NFT",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "logoUrl": {
                  "description": "Account logo URL, if available",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Account name",
                  "nullable": true,
                  "type": "string"
                },
                "ownerAddress": {
                  "description": "The public key (pubKey) associated with the Solana account",
                  "type": "string"
                },
                "twitterUrl": {
                  "description": "Twiiter url for the account",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "ownerAddress",
                "labels",
                "dateAdded"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "KnownAccountVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "accounts": {
                  "description": "Found accounts",
                  "items": {
                    "properties": {
                      "dateAdded": {
                        "description": "Date added to the database",
                        "format": "date-time",
                        "type": "string"
                      },
                      "entity": {
                        "description": "Account entity, if available",
                        "nullable": true,
                        "type": "string"
                      },
                      "entityId": {
                        "description": "Account entity ID, if available",
                        "format": "int32",
                        "nullable": true,
                        "type": "integer"
                      },
                      "labels": {
                        "description": "Account labels, eg: DEFI,NFT",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "logoUrl": {
                        "description": "Account logo URL, if available",
                        "nullable": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Account name",
                        "nullable": true,
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "The public key (pubKey) associated with the Solana account",
                        "type": "string"
                      },
                      "twitterUrl": {
                        "description": "Twiiter url for the account",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "ownerAddress",
                      "labels",
                      "dateAdded"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "accounts"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "KnownProgramReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "dateAdded": {
                  "description": "Date added to the database",
                  "format": "date-time",
                  "type": "string"
                },
                "defiLlamaId": {
                  "description": "Program DeFi Llama ID",
                  "nullable": true,
                  "type": "string"
                },
                "entityId": {
                  "description": "Program entity ID",
                  "format": "int32",
                  "nullable": true,
                  "type": "integer"
                },
                "entityName": {
                  "description": "Name of the business or entity that controls this program",
                  "nullable": true,
                  "type": "string"
                },
                "idlUrl": {
                  "description": "Program IDL URL",
                  "nullable": true,
                  "type": "string"
                },
                "labels": {
                  "description": "Program labels, eg: DEFI,NFT",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "logoUrl": {
                  "description": "Program logo URL",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Program name",
                  "nullable": true,
                  "type": "string"
                },
                "programDescription": {
                  "description": "Program description",
                  "nullable": true,
                  "type": "string"
                },
                "programDetail": {
                  "description": "Program detail",
                  "nullable": true,
                  "type": "string"
                },
                "programId": {
                  "description": "Program ID",
                  "type": "string"
                },
                "siteUrl": {
                  "description": "Program site URL",
                  "nullable": true,
                  "type": "string"
                },
                "twitterUrl": {
                  "description": "Twiiter url for the program account",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "programId",
                "labels",
                "dateAdded"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "MarketOhlcvCandleReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "close": {
                  "type": "string"
                },
                "count": {
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "high": {
                  "type": "string"
                },
                "low": {
                  "type": "string"
                },
                "open": {
                  "type": "string"
                },
                "time": {
                  "format": "int64",
                  "type": "integer"
                },
                "volume": {
                  "type": "string"
                }
              },
              "required": [
                "time",
                "open",
                "high",
                "low",
                "close",
                "volume",
                "count"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "MarketOhlcvCandleVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found OHLCV data",
                  "items": {
                    "properties": {
                      "close": {
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "high": {
                        "type": "string"
                      },
                      "low": {
                        "type": "string"
                      },
                      "open": {
                        "type": "string"
                      },
                      "time": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "volume": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "time",
                      "open",
                      "high",
                      "low",
                      "close",
                      "volume",
                      "count"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "MarketsReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "baseTokenMint": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "baseTokenName": {
                        "description": "Name of the base token",
                        "nullable": true,
                        "type": "string"
                      },
                      "baseTokenSymbol": {
                        "description": "Ticker for the base token",
                        "nullable": true,
                        "type": "string"
                      },
                      "marketId": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "marketName": {
                        "description": "Name of the market",
                        "nullable": true,
                        "type": "string"
                      },
                      "programId": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "programName": {
                        "description": "Name of the program",
                        "nullable": true,
                        "type": "string"
                      },
                      "quoteTokenMint": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "quoteTokenName": {
                        "description": "Name of the quote token",
                        "nullable": true,
                        "type": "string"
                      },
                      "quoteTokenSymbol": {
                        "description": "Ticker for the quote token",
                        "nullable": true,
                        "type": "string"
                      },
                      "updatedAt": {
                        "description": "Latest update Time",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "marketId",
                      "programId",
                      "baseTokenMint",
                      "quoteTokenMint",
                      "updatedAt"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramDetails": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "dau": {
                  "description": "Unique fee payers in the last day",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                },
                "entityName": {
                  "description": "Name of the business or entity that controls this program",
                  "nullable": true,
                  "type": "string"
                },
                "friendlyName": {
                  "description": "Friendly name",
                  "nullable": true,
                  "type": "string"
                },
                "idlUrl": {
                  "description": "Program IDL URL",
                  "nullable": true,
                  "type": "string"
                },
                "instructions1d": {
                  "description": "Instruction count in 1 day",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                },
                "labels": {
                  "description": "Labels to filter over. Only programs matching all labels will be returned (eg. labels=DEFI,NFT)",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "logoUrl": {
                  "description": "Program logo URL",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Program name",
                  "nullable": true,
                  "type": "string"
                },
                "newUsersChange1d": {
                  "description": "1 day change in DAU",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                },
                "programDescription": {
                  "description": "Program description",
                  "nullable": true,
                  "type": "string"
                },
                "programDetail": {
                  "description": "Program detail",
                  "nullable": true,
                  "type": "string"
                },
                "programId": {
                  "description": "Program ID",
                  "type": "string"
                },
                "transactions1d": {
                  "description": "Total transactions in 1 day",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                }
              },
              "required": [
                "programId"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramInstructionName": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "callingInstructions": {
                  "format": "binary",
                  "type": "string"
                },
                "callingProgram": {
                  "type": "string"
                },
                "ixName": {
                  "type": "string"
                },
                "programLogoUrl": {
                  "type": "string"
                },
                "programName": {
                  "type": "string"
                }
              },
              "required": [
                "callingInstructions",
                "ixName",
                "callingProgram",
                "programName",
                "programLogoUrl"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramRankHelper": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "programId": {
                  "description": "Program address in base 58 format",
                  "type": "string"
                },
                "programName": {
                  "description": "Program Name - null if we dont have it in the dict",
                  "nullable": true,
                  "type": "string"
                },
                "programRank": {
                  "description": "Program rank for the day",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "score": {
                  "description": "rank score after calculation",
                  "format": "double",
                  "type": "number"
                }
              },
              "required": [
                "programRank",
                "programId",
                "score"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramRanks": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "The Ranked programs",
                  "items": {
                    "properties": {
                      "programId": {
                        "description": "Program address in base 58 format",
                        "type": "string"
                      },
                      "programName": {
                        "description": "Program Name - null if we dont have it in the dict",
                        "nullable": true,
                        "type": "string"
                      },
                      "programRank": {
                        "description": "Program rank for the day",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "score": {
                        "description": "rank score after calculation",
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "required": [
                      "programRank",
                      "programId",
                      "score"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "date": {
                  "description": "The epoch used to get the ranks for",
                  "format": "int64",
                  "type": "integer"
                },
                "interval": {
                  "description": "Interval between the ranks - Possible values: '1d', '7d' or '30d'",
                  "type": "string"
                },
                "limit": {
                  "description": "The number of ranks returned",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "date",
                "interval",
                "limit",
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramsActiveUsersCountVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "blockTime": {
                        "description": "Block time",
                        "format": "int64",
                        "type": "integer"
                      },
                      "dau": {
                        "description": "Count of unique fee payers in the selected resolution",
                        "format": "int64",
                        "type": "integer"
                      },
                      "programId": {
                        "description": "Unique public key for a Solana program",
                        "type": "string"
                      }
                    },
                    "required": [
                      "programId",
                      "dau",
                      "blockTime"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramsActiveUsersVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found active users",
                  "items": {
                    "properties": {
                      "instructions": {
                        "description": "Amount of instructions triggered by the user",
                        "format": "int64",
                        "type": "integer"
                      },
                      "programId": {
                        "description": "Id of requested program",
                        "type": "string"
                      },
                      "transactions": {
                        "description": "Amount of transactions triggered by the user",
                        "format": "int64",
                        "type": "integer"
                      },
                      "wallet": {
                        "description": "User's wallet id",
                        "type": "string"
                      }
                    },
                    "required": [
                      "programId",
                      "wallet",
                      "transactions",
                      "instructions"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramsInstructionsCountVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found instructions count",
                  "items": {
                    "properties": {
                      "blockTime": {
                        "description": "Block time",
                        "format": "int64",
                        "type": "integer"
                      },
                      "instructionsCount": {
                        "description": "Instructions count",
                        "format": "int64",
                        "type": "integer"
                      },
                      "programId": {
                        "description": "Unique public key for a Solana program",
                        "type": "string"
                      }
                    },
                    "required": [
                      "programId",
                      "instructionsCount",
                      "blockTime"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramsListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "dau": {
                        "description": "Unique fee payers in the last day",
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                      },
                      "entityName": {
                        "description": "Name of the business or entity that controls this program",
                        "nullable": true,
                        "type": "string"
                      },
                      "friendlyName": {
                        "description": "Friendly name",
                        "nullable": true,
                        "type": "string"
                      },
                      "idlUrl": {
                        "description": "Program IDL URL",
                        "nullable": true,
                        "type": "string"
                      },
                      "instructions1d": {
                        "description": "Instruction count in 1 day",
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                      },
                      "labels": {
                        "description": "Labels to filter over. Only programs matching all labels will be returned (eg. labels=DEFI,NFT)",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                      },
                      "logoUrl": {
                        "description": "Program logo URL",
                        "nullable": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Program name",
                        "nullable": true,
                        "type": "string"
                      },
                      "newUsersChange1d": {
                        "description": "1 day change in DAU",
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                      },
                      "programDescription": {
                        "description": "Program description",
                        "nullable": true,
                        "type": "string"
                      },
                      "programDetail": {
                        "description": "Program detail",
                        "nullable": true,
                        "type": "string"
                      },
                      "programId": {
                        "description": "Program ID",
                        "type": "string"
                      },
                      "transactions1d": {
                        "description": "Total transactions in 1 day",
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "programId"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramsTransactionsCountVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found transactions count",
                  "items": {
                    "properties": {
                      "blockTime": {
                        "description": "Block time",
                        "format": "int64",
                        "type": "integer"
                      },
                      "programId": {
                        "description": "Unique public key for a Solana program",
                        "type": "string"
                      },
                      "transactionsCount": {
                        "description": "Transactions count",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "programId",
                      "transactionsCount",
                      "blockTime"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ProgramsTvlVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found TVLs for program",
                  "items": {
                    "properties": {
                      "time": {
                        "description": "time as TIMESTAMPTZ",
                        "format": "date-time",
                        "type": "string"
                      },
                      "tvl": {
                        "description": "Programs TVL",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tvl",
                      "time"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "PythPriceFeed": {
        "content": {
          "application/json": {
            "schema": {
              "description": "User-facing Pyth price feed update",
              "properties": {
                "confidence": {
                  "description": "Confidence interval of how close we think the true price is to the average.\nIt's influenced by both how sure each person quoting the price is, and how much they agree with each other.",
                  "type": "string"
                },
                "emac1H": {
                  "description": "Exponentially-weighted moving average confidence interval is a time-weighted average of the confidence interval",
                  "type": "string"
                },
                "emap1H": {
                  "description": "Exponentially-weighted moving average price is a time-weighted average of the aggregate price",
                  "type": "string"
                },
                "lastUpdated": {
                  "description": "The last updated time",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price of asset expressed in USD",
                  "type": "string"
                },
                "priceFeedAccount": {
                  "format": "pubkey",
                  "type": "string"
                },
                "validSlot": {
                  "description": "The last valid slot",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "priceFeedAccount",
                "lastUpdated",
                "validSlot",
                "price",
                "confidence",
                "emac1H",
                "emap1H"
              ],
              "type": "object"
            }
          }
        },
        "description": "User-facing Pyth price feed update"
      },
      "PythPriceFeedsTimeSeriesReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "description": "User-facing Pyth price feed update",
                    "properties": {
                      "confidence": {
                        "description": "Confidence interval of how close we think the true price is to the average.\nIt's influenced by both how sure each person quoting the price is, and how much they agree with each other.",
                        "type": "string"
                      },
                      "emac1H": {
                        "description": "Exponentially-weighted moving average confidence interval is a time-weighted average of the confidence interval",
                        "type": "string"
                      },
                      "emap1H": {
                        "description": "Exponentially-weighted moving average price is a time-weighted average of the aggregate price",
                        "type": "string"
                      },
                      "lastUpdated": {
                        "description": "The last updated time",
                        "format": "int64",
                        "type": "integer"
                      },
                      "price": {
                        "description": "Price of asset expressed in USD",
                        "type": "string"
                      },
                      "priceFeedAccount": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "validSlot": {
                        "description": "The last valid slot",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "priceFeedAccount",
                      "lastUpdated",
                      "validSlot",
                      "price",
                      "confidence",
                      "emac1H",
                      "emap1H"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "PythPriceOhlcReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "avgConf": {
                        "description": "Average confidence",
                        "type": "string"
                      },
                      "avgPrice": {
                        "description": "Average price",
                        "type": "string"
                      },
                      "close": {
                        "description": "Close price",
                        "type": "string"
                      },
                      "high": {
                        "description": "High price",
                        "type": "string"
                      },
                      "low": {
                        "description": "Low price",
                        "type": "string"
                      },
                      "open": {
                        "description": "Open price",
                        "type": "string"
                      },
                      "timeBucketStart": {
                        "description": "Time bucket start",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "timeBucketStart",
                      "open",
                      "high",
                      "low",
                      "close",
                      "avgPrice",
                      "avgConf"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "PythPriceProductPairsReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "priceFeedId": {
                        "description": "The pubkey identifying the Pyth Price feed account.",
                        "type": "string"
                      },
                      "productId": {
                        "description": "The pubkey identifying the Pyth Product account.",
                        "type": "string"
                      },
                      "symbol": {
                        "description": "The Pyth asset symbol",
                        "type": "string"
                      }
                    },
                    "required": [
                      "productId",
                      "priceFeedId",
                      "symbol"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "PythProduct": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "oneOf": [
                        {
                          "properties": {
                            "schedule": {
                              "description": "Weekly schedule",
                              "type": "string"
                            }
                          },
                          "required": [
                            "schedule"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "umtf": {
                              "description": "UMTF",
                              "type": "string"
                            }
                          },
                          "required": [
                            "umtf"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  ],
                  "nullable": true
                },
                {
                  "oneOf": [
                    {
                      "properties": {
                        "genericSymbol": {
                          "description": "Ticker symbol",
                          "type": "string"
                        }
                      },
                      "required": [
                        "genericSymbol"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "cmsSymbol": {
                          "description": "CMS market symbol",
                          "type": "string"
                        },
                        "cqsSymbol": {
                          "description": "CQS market symbol",
                          "type": "string"
                        },
                        "nasdaqSymbol": {
                          "description": "Nasdaq market symbol",
                          "type": "string"
                        }
                      },
                      "required": [
                        "cmsSymbol",
                        "cqsSymbol",
                        "nasdaqSymbol"
                      ],
                      "type": "object"
                    }
                  ]
                },
                {
                  "properties": {
                    "assetType": {
                      "description": "The asset class: Crypto, Equity, FX, Metal, Rates, Commodities",
                      "type": "string"
                    },
                    "base": {
                      "description": "Base asset. Can be present for everything except rates and commodities.",
                      "nullable": true,
                      "type": "string"
                    },
                    "country": {
                      "description": "The country code. Can be present for equity only.",
                      "nullable": true,
                      "type": "string"
                    },
                    "description": {
                      "description": "Pair name",
                      "type": "string"
                    },
                    "productId": {
                      "description": "The pubkey identifying the Pyth Product.",
                      "type": "string"
                    },
                    "quote": {
                      "description": "Quote currency. Can be present for everything except rates and commodities.",
                      "nullable": true,
                      "type": "string"
                    },
                    "symbol": {
                      "description": "Pyth asset symbol",
                      "type": "string"
                    },
                    "tenor": {
                      "description": "The tenor. Can be present for FX or equity only.",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "productId",
                    "description",
                    "symbol",
                    "assetType"
                  ],
                  "type": "object"
                }
              ],
              "description": "Structure corresponding to what we will fetch in the API\nThis is saved to a json file"
            }
          }
        },
        "description": "Structure corresponding to what we will fetch in the API\nThis is saved to a json file"
      },
      "SolanaId": {
        "content": {
          "application/octet-stream": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "TokenBalance": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "amount": {
                  "description": "Amount of the token",
                  "type": "string"
                },
                "category": {
                  "description": "Category for the token",
                  "nullable": true,
                  "type": "string"
                },
                "decimals": {
                  "description": "Decimals for the token",
                  "format": "int64",
                  "type": "integer"
                },
                "logoUrl": {
                  "description": "Logo URL for the token",
                  "nullable": true,
                  "type": "string"
                },
                "mintAddress": {
                  "description": "Address for the token",
                  "type": "string"
                },
                "name": {
                  "description": "Name for the token, can be null for unknown addresses",
                  "nullable": true,
                  "type": "string"
                },
                "priceUsd": {
                  "description": "Average price of the token in USD",
                  "type": "string"
                },
                "priceUsd1dChange": {
                  "description": "Change in the price of the token in USD over the last 24 hours",
                  "type": "string"
                },
                "priceUsd7dTrend": {
                  "description": "7 day trend of the token price in USD",
                  "type": "string"
                },
                "slot": {
                  "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
                  "format": "int64",
                  "type": "integer"
                },
                "symbol": {
                  "description": "Symbol for the token, can be null for unknown addresses",
                  "nullable": true,
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value of the held tokens in USD",
                  "type": "string"
                },
                "valueUsd1dChange": {
                  "description": "Change in the value of the held tokens in USD over the last 24 hours",
                  "type": "string"
                },
                "verified": {
                  "description": "Whether the token is verified or not.",
                  "type": "boolean"
                }
              },
              "required": [
                "mintAddress",
                "amount",
                "priceUsd",
                "priceUsd1dChange",
                "priceUsd7dTrend",
                "valueUsd",
                "valueUsd1dChange",
                "decimals",
                "verified",
                "slot"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokenBalanceNft": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "collectionAddress": {
                  "description": "Public key of the NFT collection",
                  "type": "string"
                },
                "logoUrl": {
                  "description": "Logo URL for the NFT",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Symbol for the NFT",
                  "nullable": true,
                  "type": "string"
                },
                "priceSol": {
                  "description": "Price of the NFT in SOL",
                  "type": "string"
                },
                "priceUsd": {
                  "description": "Price of the NFT in USD",
                  "type": "string"
                },
                "slot": {
                  "description": "Slot for the most recent update to the NFT balance",
                  "format": "int64",
                  "type": "integer"
                },
                "totalItems": {
                  "description": "Amount of the NFT",
                  "format": "int32",
                  "type": "integer"
                },
                "valueSol": {
                  "description": "Value of the held NFT in SOL",
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value of the held NFT in USD",
                  "type": "string"
                }
              },
              "required": [
                "collectionAddress",
                "totalItems",
                "valueSol",
                "priceSol",
                "valueUsd",
                "priceUsd",
                "slot"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokenData": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "decimal": {
                  "description": "Decimal of the token",
                  "format": "int32",
                  "type": "integer"
                },
                "insertTime": {
                  "description": "The time the data was inserted into the database",
                  "format": "int64",
                  "type": "integer"
                },
                "mintAddress": {
                  "description": "The public key of the token of interest",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the token",
                  "type": "string"
                },
                "price": {
                  "description": "The price of the token",
                  "type": "string"
                },
                "symbol": {
                  "description": "The symbol of the token",
                  "type": "string"
                }
              },
              "required": [
                "symbol",
                "name",
                "mintAddress",
                "price",
                "decimal",
                "insertTime"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokenHoldersTimeSeriesReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Token holders time series data.",
                  "items": {
                    "properties": {
                      "holdersTimestamp": {
                        "description": "Unix timestamp of the record.",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "nDust": {
                        "description": "Number of dust accounts at the instant. (< 100 tokens)",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "nHolders": {
                        "description": "Number of token holders at the instant.",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "nLarge": {
                        "description": "Number of large accounts at the instant. (between 10000 and 100000 tokens)",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "nMedium": {
                        "description": "Number of medium accounts at the instant. (between 1000 and 10000 tokens)",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "nSmall": {
                        "description": "Number of small accounts at the instant. (between 100 and 1000 tokens)",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "nWhale": {
                        "description": "Number of whale accounts at the instant. (> 100000 tokens)",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "holdersTimestamp",
                      "nHolders",
                      "nDust",
                      "nSmall",
                      "nMedium",
                      "nLarge",
                      "nWhale"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokenInformationCH": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "category": {
                  "description": "Category of the token",
                  "nullable": true,
                  "type": "string"
                },
                "currentSupply": {
                  "description": "Current token supply",
                  "format": "double",
                  "type": "number"
                },
                "decimal": {
                  "description": "Decimal places",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "logoUrl": {
                  "description": "Logo associated with the token",
                  "nullable": true,
                  "type": "string"
                },
                "marketCap": {
                  "description": "Current token market cap",
                  "format": "double",
                  "type": "number"
                },
                "mintAddress": {
                  "description": "The public key of the token of interest",
                  "type": "string"
                },
                "name": {
                  "description": "Token mint name",
                  "nullable": true,
                  "type": "string"
                },
                "price": {
                  "description": "Current price in USD",
                  "format": "double",
                  "type": "number"
                },
                "price1d": {
                  "description": "Price in USD of the token 1 day ago",
                  "format": "double",
                  "type": "number"
                },
                "price7d": {
                  "description": "Price in USD of the token 7 days ago",
                  "format": "double",
                  "type": "number"
                },
                "subcategory": {
                  "description": "Subcategory of the token",
                  "nullable": true,
                  "type": "string"
                },
                "symbol": {
                  "description": "Token mint symbol",
                  "type": "string"
                },
                "tokenAmountVolume24h": {
                  "description": "Token volume transferred in past 24 hours",
                  "format": "double",
                  "nullable": true,
                  "type": "number"
                },
                "updateTime": {
                  "description": "Time of last update of price",
                  "format": "int64",
                  "type": "integer"
                },
                "usdValueVolume24h": {
                  "description": "Token volume transferred in past 24 hours USD value",
                  "format": "double",
                  "nullable": true,
                  "type": "number"
                },
                "verified": {
                  "description": "Verified status of the token",
                  "type": "boolean"
                }
              },
              "required": [
                "symbol",
                "mintAddress",
                "price",
                "price1d",
                "price7d",
                "decimal",
                "verified",
                "updateTime",
                "currentSupply",
                "marketCap"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokenOhlcData": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "close": {
                  "description": "Close price",
                  "type": "string"
                },
                "count": {
                  "description": "Number of trades",
                  "format": "int64",
                  "type": "integer"
                },
                "high": {
                  "description": "High price",
                  "type": "string"
                },
                "low": {
                  "description": "Low price",
                  "type": "string"
                },
                "open": {
                  "description": "Open price",
                  "type": "string"
                },
                "timeBucketStart": {
                  "description": "OHLC time bucket start",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "timeBucketStart",
                "open",
                "high",
                "low",
                "close",
                "count"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokenTransfersReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "transfers": {
                  "description": "Found transfer data",
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "The total number of tokens involved in the transaction.",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "blockTime": {
                        "description": "The timestamp when the transaction was confirmed on the blockchain, in Unix time.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "calculatedAmount": {
                        "description": "The resulting amount after applying the `decimal` to the `amount` value.",
                        "type": "string"
                      },
                      "callingMetadata": {
                        "description": "The public key of the Solana program that initiated the transaction.",
                        "items": {
                          "properties": {
                            "callingInstructions": {
                              "format": "binary",
                              "type": "string"
                            },
                            "callingProgram": {
                              "type": "string"
                            },
                            "ixName": {
                              "type": "string"
                            },
                            "programName": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "callingInstructions",
                            "ixName",
                            "callingProgram",
                            "programName"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "decimal": {
                        "description": "The number of decimal places used for the token's smallest unit.",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "feePayer": {
                        "description": "The public key of the account responsible for paying the transaction fees.",
                        "type": "string"
                      },
                      "mintAddress": {
                        "description": "The public key of the token's mint, specifying the token type involved in the transaction.",
                        "type": "string"
                      },
                      "price": {
                        "description": "Price of the token involved in the transaction (e.g. `mint_address`) expressed in USD.",
                        "type": "string"
                      },
                      "receiverAddress": {
                        "description": "The public key of the account receiving the tokens.",
                        "nullable": true,
                        "type": "string"
                      },
                      "receiverTokenAccount": {
                        "description": "The public key of the specific token account of the receiver.",
                        "nullable": true,
                        "type": "string"
                      },
                      "senderAddress": {
                        "description": "The public key of the account sending the tokens.",
                        "type": "string"
                      },
                      "senderTokenAccount": {
                        "description": "The public key of the specific token account of the sender.",
                        "nullable": true,
                        "type": "string"
                      },
                      "signature": {
                        "description": "The cryptographic signature that uniquely identifies the transaction on the blockchain.",
                        "type": "string"
                      },
                      "slot": {
                        "description": "The slot number in which the transaction was processed on the Solana blockchain, helping to pinpoint the exact sequence of events.",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "valueUsd": {
                        "description": "Calculated total USD value of the transfer based on the `amount`, `decimal`, and `price` values.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "signature",
                      "callingMetadata",
                      "senderAddress",
                      "mintAddress",
                      "feePayer",
                      "decimal",
                      "amount",
                      "slot",
                      "blockTime",
                      "price",
                      "calculatedAmount",
                      "valueUsd"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "transfers"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokenVolumeTimeSeriesReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "Amount transferred of the token.",
                        "type": "string"
                      },
                      "timeBucketStart": {
                        "description": "Time interval start time.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "volume": {
                        "description": "Volume transferred of the token in USD.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "timeBucketStart",
                      "volume",
                      "amount"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TokensReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "category": {
                        "description": "Category of the token",
                        "nullable": true,
                        "type": "string"
                      },
                      "currentSupply": {
                        "description": "Current token supply",
                        "format": "double",
                        "type": "number"
                      },
                      "decimal": {
                        "description": "Decimal places",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "logoUrl": {
                        "description": "Logo associated with the token",
                        "nullable": true,
                        "type": "string"
                      },
                      "marketCap": {
                        "description": "Current token market cap",
                        "format": "double",
                        "type": "number"
                      },
                      "mintAddress": {
                        "description": "The public key of the token of interest",
                        "type": "string"
                      },
                      "name": {
                        "description": "Token mint name",
                        "nullable": true,
                        "type": "string"
                      },
                      "price": {
                        "description": "Current price in USD",
                        "format": "double",
                        "type": "number"
                      },
                      "price1d": {
                        "description": "Price in USD of the token 1 day ago",
                        "format": "double",
                        "type": "number"
                      },
                      "price7d": {
                        "description": "Price in USD of the token 7 days ago",
                        "format": "double",
                        "type": "number"
                      },
                      "subcategory": {
                        "description": "Subcategory of the token",
                        "nullable": true,
                        "type": "string"
                      },
                      "symbol": {
                        "description": "Token mint symbol",
                        "type": "string"
                      },
                      "tokenAmountVolume24h": {
                        "description": "Token volume transferred in past 24 hours",
                        "format": "double",
                        "nullable": true,
                        "type": "number"
                      },
                      "updateTime": {
                        "description": "Time of last update of price",
                        "format": "int64",
                        "type": "integer"
                      },
                      "usdValueVolume24h": {
                        "description": "Token volume transferred in past 24 hours USD value",
                        "format": "double",
                        "nullable": true,
                        "type": "number"
                      },
                      "verified": {
                        "description": "Verified status of the token",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "symbol",
                      "mintAddress",
                      "price",
                      "price1d",
                      "price7d",
                      "decimal",
                      "verified",
                      "updateTime",
                      "currentSupply",
                      "marketCap"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TopHolders": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "balance": {
                  "description": "Current Token Amount",
                  "type": "string"
                },
                "ownerAddress": {
                  "description": "Holder address",
                  "type": "string"
                },
                "ownerLogoUrl": {
                  "description": "Holder logo url",
                  "nullable": true,
                  "type": "string"
                },
                "ownerName": {
                  "description": "Holder name",
                  "nullable": true,
                  "type": "string"
                },
                "percentageOfSupplyHeld": {
                  "description": "Percentage of supply held",
                  "format": "double",
                  "type": "number"
                },
                "rank": {
                  "description": "Rank",
                  "format": "int64",
                  "type": "integer"
                },
                "tokenLogoUrl": {
                  "description": "Logo Url of the token of interest",
                  "nullable": true,
                  "type": "string"
                },
                "tokenMint": {
                  "description": "The public key of the token of interest",
                  "type": "string"
                },
                "tokenSymbol": {
                  "description": "Symbol of the token of interest",
                  "nullable": true,
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value Usd",
                  "type": "string"
                }
              },
              "required": [
                "rank",
                "ownerAddress",
                "tokenMint",
                "balance",
                "valueUsd",
                "percentageOfSupplyHeld"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TopHoldersReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "balance": {
                        "description": "Current Token Amount",
                        "type": "string"
                      },
                      "ownerAddress": {
                        "description": "Holder address",
                        "type": "string"
                      },
                      "ownerLogoUrl": {
                        "description": "Holder logo url",
                        "nullable": true,
                        "type": "string"
                      },
                      "ownerName": {
                        "description": "Holder name",
                        "nullable": true,
                        "type": "string"
                      },
                      "percentageOfSupplyHeld": {
                        "description": "Percentage of supply held",
                        "format": "double",
                        "type": "number"
                      },
                      "rank": {
                        "description": "Rank",
                        "format": "int64",
                        "type": "integer"
                      },
                      "tokenLogoUrl": {
                        "description": "Logo Url of the token of interest",
                        "nullable": true,
                        "type": "string"
                      },
                      "tokenMint": {
                        "description": "The public key of the token of interest",
                        "type": "string"
                      },
                      "tokenSymbol": {
                        "description": "Symbol of the token of interest",
                        "nullable": true,
                        "type": "string"
                      },
                      "valueUsd": {
                        "description": "Value Usd",
                        "type": "string"
                      }
                    },
                    "required": [
                      "rank",
                      "ownerAddress",
                      "tokenMint",
                      "balance",
                      "valueUsd",
                      "percentageOfSupplyHeld"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradeDataProgramVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found trade data",
                  "items": {
                    "properties": {
                      "authorityAddress": {
                        "description": "The public key of the signer who authorized the trade.",
                        "type": "string"
                      },
                      "baseMintAddress": {
                        "description": "The mint address of the base token involved in the trade.",
                        "type": "string"
                      },
                      "baseSize": {
                        "description": "The quantity of the base token involved in the trade.",
                        "type": "string"
                      },
                      "blockTime": {
                        "description": "The Unix timestamp at which the trade occurred on the blockchain.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "fee": {
                        "description": "The amount of fees paid for the trade.",
                        "type": "string"
                      },
                      "feePayer": {
                        "description": "The public key of the account responsible for paying the transaction fees.",
                        "type": "string"
                      },
                      "iixOrdinal": {
                        "description": "The location of the trade inner ix inside the transaction. 255 is returned if not applicable.",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "interIxOrdinal": {
                        "description": "The location of the trade inside an ix (in 2 hop swaps). 255 is returned if not applicable.",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "ixOrdinal": {
                        "description": "The location of the trade ix inside the transaction.",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "marketId": {
                        "description": "The identifier for the market pair, e.g., SOL/USDC, where the trade took place.",
                        "type": "string"
                      },
                      "price": {
                        "description": "The price of one unit of the base token, expressed in terms of the quote token.",
                        "type": "string"
                      },
                      "programId": {
                        "description": "The public key of the AMM or DEX program that facilitated the trade.",
                        "type": "string"
                      },
                      "quoteMintAddress": {
                        "description": "The mint address of the quote token used in the trade.",
                        "type": "string"
                      },
                      "quoteSize": {
                        "description": "The amount of the quote token exchanged in the trade.",
                        "type": "string"
                      },
                      "signature": {
                        "description": "The unique identifier of the transaction signature on the blockchain.",
                        "type": "string"
                      },
                      "slot": {
                        "description": "Slot of the trade",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "txIndex": {
                        "description": "The transaction index of the trade.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "authorityAddress",
                      "blockTime",
                      "iixOrdinal",
                      "baseMintAddress",
                      "interIxOrdinal",
                      "ixOrdinal",
                      "marketId",
                      "quoteMintAddress",
                      "price",
                      "programId",
                      "signature",
                      "slot",
                      "txIndex",
                      "fee",
                      "feePayer",
                      "baseSize",
                      "quoteSize"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradeOhlcvCandleReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "close": {
                  "description": "Close price",
                  "type": "string"
                },
                "count": {
                  "description": "Number of trades",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "high": {
                  "description": "High price",
                  "type": "string"
                },
                "low": {
                  "description": "Low price",
                  "type": "string"
                },
                "open": {
                  "description": "Open price",
                  "type": "string"
                },
                "time": {
                  "description": "OHLC time bucket start",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume",
                  "type": "string"
                },
                "volumeUsd": {
                  "description": "Volume in USD",
                  "type": "string"
                }
              },
              "required": [
                "time",
                "open",
                "high",
                "low",
                "close",
                "volume",
                "volumeUsd",
                "count"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradeOhlcvCandleReturnDeprecated": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "close": {
                  "description": "Close price",
                  "type": "string"
                },
                "count": {
                  "description": "Number of trades",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "high": {
                  "description": "High price",
                  "type": "string"
                },
                "low": {
                  "description": "Low price",
                  "type": "string"
                },
                "open": {
                  "description": "Open price",
                  "type": "string"
                },
                "time": {
                  "description": "OHLC time bucket start",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume",
                  "type": "string"
                }
              },
              "required": [
                "time",
                "open",
                "high",
                "low",
                "close",
                "volume",
                "count"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradeOhlcvCandleVecReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found OHLCV data",
                  "items": {
                    "properties": {
                      "close": {
                        "description": "Close price",
                        "type": "string"
                      },
                      "count": {
                        "description": "Number of trades",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "high": {
                        "description": "High price",
                        "type": "string"
                      },
                      "low": {
                        "description": "Low price",
                        "type": "string"
                      },
                      "open": {
                        "description": "Open price",
                        "type": "string"
                      },
                      "time": {
                        "description": "OHLC time bucket start",
                        "type": "string"
                      },
                      "volume": {
                        "description": "Volume",
                        "type": "string"
                      },
                      "volumeUsd": {
                        "description": "Volume in USD",
                        "type": "string"
                      }
                    },
                    "required": [
                      "time",
                      "open",
                      "high",
                      "low",
                      "close",
                      "volume",
                      "volumeUsd",
                      "count"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradeOhlcvCandleVecReturnDeprecated": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "Found OHLCV data",
                  "items": {
                    "properties": {
                      "close": {
                        "description": "Close price",
                        "type": "string"
                      },
                      "count": {
                        "description": "Number of trades",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "high": {
                        "description": "High price",
                        "type": "string"
                      },
                      "low": {
                        "description": "Low price",
                        "type": "string"
                      },
                      "open": {
                        "description": "Open price",
                        "type": "string"
                      },
                      "time": {
                        "description": "OHLC time bucket start",
                        "type": "string"
                      },
                      "volume": {
                        "description": "Volume",
                        "type": "string"
                      }
                    },
                    "required": [
                      "time",
                      "open",
                      "high",
                      "low",
                      "close",
                      "volume",
                      "count"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradePriceMarketReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "baseTokenMint": {
                  "format": "pubkey",
                  "type": "string"
                },
                "baseTokenName": {
                  "description": "Name of the base token",
                  "nullable": true,
                  "type": "string"
                },
                "baseTokenSymbol": {
                  "description": "Ticker for the base token",
                  "nullable": true,
                  "type": "string"
                },
                "marketId": {
                  "format": "pubkey",
                  "type": "string"
                },
                "marketName": {
                  "description": "Name of the market",
                  "nullable": true,
                  "type": "string"
                },
                "programId": {
                  "format": "pubkey",
                  "type": "string"
                },
                "programName": {
                  "description": "Name of the program",
                  "nullable": true,
                  "type": "string"
                },
                "quoteTokenMint": {
                  "format": "pubkey",
                  "type": "string"
                },
                "quoteTokenName": {
                  "description": "Name of the quote token",
                  "nullable": true,
                  "type": "string"
                },
                "quoteTokenSymbol": {
                  "description": "Ticker for the quote token",
                  "nullable": true,
                  "type": "string"
                },
                "updatedAt": {
                  "description": "Latest update Time",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "marketId",
                "programId",
                "baseTokenMint",
                "quoteTokenMint",
                "updatedAt"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradePriceProgramsReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "programId": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "programName": {
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "programId"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TradesPricesProgram": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "programId": {
                  "format": "pubkey",
                  "type": "string"
                },
                "programName": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "programId"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TransferReturn": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "amount": {
                  "description": "The total number of tokens involved in the transaction.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "blockTime": {
                  "description": "The timestamp when the transaction was confirmed on the blockchain, in Unix time.",
                  "format": "int64",
                  "type": "integer"
                },
                "calculatedAmount": {
                  "description": "The resulting amount after applying the `decimal` to the `amount` value.",
                  "type": "string"
                },
                "callingMetadata": {
                  "description": "The public key of the Solana program that initiated the transaction.",
                  "items": {
                    "properties": {
                      "callingInstructions": {
                        "format": "binary",
                        "type": "string"
                      },
                      "callingProgram": {
                        "type": "string"
                      },
                      "ixName": {
                        "type": "string"
                      },
                      "programName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "callingInstructions",
                      "ixName",
                      "callingProgram",
                      "programName"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "decimal": {
                  "description": "The number of decimal places used for the token's smallest unit.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "feePayer": {
                  "description": "The public key of the account responsible for paying the transaction fees.",
                  "type": "string"
                },
                "mintAddress": {
                  "description": "The public key of the token's mint, specifying the token type involved in the transaction.",
                  "type": "string"
                },
                "price": {
                  "description": "Price of the token involved in the transaction (e.g. `mint_address`) expressed in USD.",
                  "type": "string"
                },
                "receiverAddress": {
                  "description": "The public key of the account receiving the tokens.",
                  "nullable": true,
                  "type": "string"
                },
                "receiverTokenAccount": {
                  "description": "The public key of the specific token account of the receiver.",
                  "nullable": true,
                  "type": "string"
                },
                "senderAddress": {
                  "description": "The public key of the account sending the tokens.",
                  "type": "string"
                },
                "senderTokenAccount": {
                  "description": "The public key of the specific token account of the sender.",
                  "nullable": true,
                  "type": "string"
                },
                "signature": {
                  "description": "The cryptographic signature that uniquely identifies the transaction on the blockchain.",
                  "type": "string"
                },
                "slot": {
                  "description": "The slot number in which the transaction was processed on the Solana blockchain, helping to pinpoint the exact sequence of events.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "valueUsd": {
                  "description": "Calculated total USD value of the transfer based on the `amount`, `decimal`, and `price` values.",
                  "type": "string"
                }
              },
              "required": [
                "signature",
                "callingMetadata",
                "senderAddress",
                "mintAddress",
                "feePayer",
                "decimal",
                "amount",
                "slot",
                "blockTime",
                "price",
                "calculatedAmount",
                "valueUsd"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TransferReturnWs": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "amount": {
                  "description": "The total number of tokens involved in the transaction.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "blockTime": {
                  "description": "The timestamp when the transaction was confirmed on the blockchain, in Unix time.",
                  "format": "int64",
                  "type": "integer"
                },
                "callingPrograms": {
                  "description": "An array of all the programs that were utilized during the transaction If a specific program is used as a filter in the query, it may appear in the CallingPrograms array alongside other programs that were also part of the transaction.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "decimal": {
                  "description": "The number of decimal places used for the token's smallest unit.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "feePayer": {
                  "description": "The public key of the account responsible for paying the transaction fees.",
                  "type": "string"
                },
                "id": {
                  "description": "Unique identifier for the transaction.",
                  "format": "binary",
                  "type": "string"
                },
                "mintAddress": {
                  "description": "The public key of the token's mint, specifying the token type involved in the transaction.",
                  "type": "string"
                },
                "receiverAddress": {
                  "description": "The public key of the account receiving the tokens.",
                  "nullable": true,
                  "type": "string"
                },
                "receiverTokenAccount": {
                  "description": "The public key of the specific token account of the receiver.",
                  "nullable": true,
                  "type": "string"
                },
                "senderAddress": {
                  "description": "The public key of the account sending the tokens.",
                  "type": "string"
                },
                "senderTokenAccount": {
                  "description": "The public key of the specific token account of the sender.",
                  "nullable": true,
                  "type": "string"
                },
                "signature": {
                  "description": "The cryptographic signature that uniquely identifies the transaction on the blockchain.",
                  "type": "string"
                },
                "slot": {
                  "description": "The slot number in which the transaction was processed on the Solana blockchain, helping to pinpoint the exact sequence of events.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "signature",
                "callingPrograms",
                "senderAddress",
                "mintAddress",
                "feePayer",
                "decimal",
                "amount",
                "slot",
                "blockTime",
                "id"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "WalletBalanceNftResults": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "NFTs in the wallet (up to limit)",
                  "items": {
                    "properties": {
                      "collectionAddress": {
                        "description": "Public key of the NFT collection",
                        "type": "string"
                      },
                      "logoUrl": {
                        "description": "Logo URL for the NFT",
                        "nullable": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Symbol for the NFT",
                        "nullable": true,
                        "type": "string"
                      },
                      "priceSol": {
                        "description": "Price of the NFT in SOL",
                        "type": "string"
                      },
                      "priceUsd": {
                        "description": "Price of the NFT in USD",
                        "type": "string"
                      },
                      "slot": {
                        "description": "Slot for the most recent update to the NFT balance",
                        "format": "int64",
                        "type": "integer"
                      },
                      "totalItems": {
                        "description": "Amount of the NFT",
                        "format": "int32",
                        "type": "integer"
                      },
                      "valueSol": {
                        "description": "Value of the held NFT in SOL",
                        "type": "string"
                      },
                      "valueUsd": {
                        "description": "Value of the held NFT in USD",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collectionAddress",
                      "totalItems",
                      "valueSol",
                      "priceSol",
                      "valueUsd",
                      "priceUsd",
                      "slot"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "date": {
                  "description": "Datetime of the report as a Unix timestamp",
                  "minimum": 0,
                  "type": "integer"
                },
                "ownerAddress": {
                  "format": "pubkey",
                  "type": "string"
                },
                "totalNftCollectionCount": {
                  "description": "Total number of nfts in the wallet",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "totalSol": {
                  "description": "Value of the wallet in SOL",
                  "type": "string"
                },
                "totalUsd": {
                  "description": "Value of the wallet in USD",
                  "type": "string"
                }
              },
              "required": [
                "date",
                "ownerAddress",
                "totalSol",
                "totalUsd",
                "totalNftCollectionCount",
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "WalletBalanceNftResultsMany": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "description": "NFTs in the wallet (up to limit)",
                  "items": {
                    "properties": {
                      "collectionAddress": {
                        "description": "Public key of the NFT collection",
                        "type": "string"
                      },
                      "logoUrl": {
                        "description": "Logo URL for the NFT",
                        "nullable": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Symbol for the NFT",
                        "nullable": true,
                        "type": "string"
                      },
                      "priceSol": {
                        "description": "Price of the NFT in SOL",
                        "type": "string"
                      },
                      "priceUsd": {
                        "description": "Price of the NFT in USD",
                        "type": "string"
                      },
                      "slot": {
                        "description": "Slot for the most recent update to the NFT balance",
                        "format": "int64",
                        "type": "integer"
                      },
                      "totalItems": {
                        "description": "Amount of the NFT",
                        "format": "int32",
                        "type": "integer"
                      },
                      "valueSol": {
                        "description": "Value of the held NFT in SOL",
                        "type": "string"
                      },
                      "valueUsd": {
                        "description": "Value of the held NFT in USD",
                        "type": "string"
                      }
                    },
                    "required": [
                      "collectionAddress",
                      "totalItems",
                      "valueSol",
                      "priceSol",
                      "valueUsd",
                      "priceUsd",
                      "slot"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "date": {
                  "description": "Datetime of the report as a Unix timestamp",
                  "minimum": 0,
                  "type": "integer"
                },
                "ownerAddresses": {
                  "description": "Owners of the wallets",
                  "items": {
                    "format": "pubkey",
                    "type": "string"
                  },
                  "type": "array"
                },
                "totalNftCollectionCount": {
                  "description": "Total number of nft collections in the wallet",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "totalSol": {
                  "description": "Value of the wallet in SOL",
                  "type": "string"
                },
                "totalUsd": {
                  "description": "Value of the wallet in USD",
                  "type": "string"
                }
              },
              "required": [
                "date",
                "ownerAddresses",
                "totalSol",
                "totalUsd",
                "totalNftCollectionCount",
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "WalletBalanceTokenResults": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "activeStakedSolBalance": {
                  "description": "Value of active staked SOL",
                  "type": "string"
                },
                "activeStakedSolBalanceUsd": {
                  "description": "Value of active staked SOL in USD",
                  "type": "string"
                },
                "data": {
                  "description": "Tokens in the wallet (up to limit)",
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "Amount of the token",
                        "type": "string"
                      },
                      "category": {
                        "description": "Category for the token",
                        "nullable": true,
                        "type": "string"
                      },
                      "decimals": {
                        "description": "Decimals for the token",
                        "format": "int64",
                        "type": "integer"
                      },
                      "logoUrl": {
                        "description": "Logo URL for the token",
                        "nullable": true,
                        "type": "string"
                      },
                      "mintAddress": {
                        "description": "Address for the token",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name for the token, can be null for unknown addresses",
                        "nullable": true,
                        "type": "string"
                      },
                      "priceUsd": {
                        "description": "Average price of the token in USD",
                        "type": "string"
                      },
                      "priceUsd1dChange": {
                        "description": "Change in the price of the token in USD over the last 24 hours",
                        "type": "string"
                      },
                      "priceUsd7dTrend": {
                        "description": "7 day trend of the token price in USD",
                        "type": "string"
                      },
                      "slot": {
                        "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
                        "format": "int64",
                        "type": "integer"
                      },
                      "symbol": {
                        "description": "Symbol for the token, can be null for unknown addresses",
                        "nullable": true,
                        "type": "string"
                      },
                      "valueUsd": {
                        "description": "Value of the held tokens in USD",
                        "type": "string"
                      },
                      "valueUsd1dChange": {
                        "description": "Change in the value of the held tokens in USD over the last 24 hours",
                        "type": "string"
                      },
                      "verified": {
                        "description": "Whether the token is verified or not.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "mintAddress",
                      "amount",
                      "priceUsd",
                      "priceUsd1dChange",
                      "priceUsd7dTrend",
                      "valueUsd",
                      "valueUsd1dChange",
                      "decimals",
                      "verified",
                      "slot"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "date": {
                  "description": "Datetime of the report as a Unix timestamp",
                  "minimum": 0,
                  "type": "integer"
                },
                "ownerAddress": {
                  "format": "pubkey",
                  "type": "string"
                },
                "stakedSolBalance": {
                  "description": "Value of the staked SOL",
                  "type": "string"
                },
                "stakedSolBalanceUsd": {
                  "description": "Value of the staked SOL in USD",
                  "type": "string"
                },
                "totalTokenCount": {
                  "description": "Total number of tokens in the wallet",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "totalTokenValueUsd": {
                  "description": "Value of the wallet in USD, including SOL",
                  "type": "string"
                },
                "totalTokenValueUsd1dChange": {
                  "description": "Change in the value of the wallet in USD over the last 24 hours",
                  "type": "string"
                }
              },
              "required": [
                "date",
                "ownerAddress",
                "stakedSolBalanceUsd",
                "stakedSolBalance",
                "activeStakedSolBalanceUsd",
                "activeStakedSolBalance",
                "totalTokenValueUsd",
                "totalTokenValueUsd1dChange",
                "totalTokenCount",
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "WalletBalanceTokenResultsMany": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "activeStakedSolBalance": {
                  "description": "Value of active staked SOL",
                  "type": "string"
                },
                "activeStakedSolBalanceUsd": {
                  "description": "Value of active staked SOL in USD",
                  "type": "string"
                },
                "data": {
                  "description": "Tokens in the wallet (up to limit)",
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "Amount of the token",
                        "type": "string"
                      },
                      "category": {
                        "description": "Category for the token",
                        "nullable": true,
                        "type": "string"
                      },
                      "decimals": {
                        "description": "Decimals for the token",
                        "format": "int64",
                        "type": "integer"
                      },
                      "logoUrl": {
                        "description": "Logo URL for the token",
                        "nullable": true,
                        "type": "string"
                      },
                      "mintAddress": {
                        "description": "Address for the token",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name for the token, can be null for unknown addresses",
                        "nullable": true,
                        "type": "string"
                      },
                      "priceUsd": {
                        "description": "Average price of the token in USD",
                        "type": "string"
                      },
                      "priceUsd1dChange": {
                        "description": "Change in the price of the token in USD over the last 24 hours",
                        "type": "string"
                      },
                      "priceUsd7dTrend": {
                        "description": "7 day trend of the token price in USD",
                        "type": "string"
                      },
                      "slot": {
                        "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
                        "format": "int64",
                        "type": "integer"
                      },
                      "symbol": {
                        "description": "Symbol for the token, can be null for unknown addresses",
                        "nullable": true,
                        "type": "string"
                      },
                      "valueUsd": {
                        "description": "Value of the held tokens in USD",
                        "type": "string"
                      },
                      "valueUsd1dChange": {
                        "description": "Change in the value of the held tokens in USD over the last 24 hours",
                        "type": "string"
                      },
                      "verified": {
                        "description": "Whether the token is verified or not.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "mintAddress",
                      "amount",
                      "priceUsd",
                      "priceUsd1dChange",
                      "priceUsd7dTrend",
                      "valueUsd",
                      "valueUsd1dChange",
                      "decimals",
                      "verified",
                      "slot"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "date": {
                  "description": "Datetime of the report as a Unix timestamp",
                  "minimum": 0,
                  "type": "integer"
                },
                "ownerAddresses": {
                  "description": "Owners of the wallets",
                  "items": {
                    "format": "pubkey",
                    "type": "string"
                  },
                  "type": "array"
                },
                "stakedSolBalance": {
                  "description": "Value of the staked SOL",
                  "type": "string"
                },
                "stakedSolBalanceUsd": {
                  "description": "Value of the staked SOL in USD",
                  "type": "string"
                },
                "totalTokenCount": {
                  "description": "Total number of tokens in the wallet",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "totalTokenValueUsd": {
                  "description": "Value of the wallet in USD, including SOL",
                  "type": "string"
                },
                "totalTokenValueUsd1dChange": {
                  "description": "Change in the value of the tokens in the wallet in USD over the last 24 hours",
                  "type": "string"
                }
              },
              "required": [
                "date",
                "ownerAddresses",
                "stakedSolBalanceUsd",
                "stakedSolBalance",
                "activeStakedSolBalanceUsd",
                "activeStakedSolBalance",
                "totalTokenValueUsd",
                "totalTokenValueUsd1dChange",
                "totalTokenCount",
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "WalletBalanceTokenResultsTimeSeries": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "blockTime": {
                        "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "stakeValue": {
                        "description": "The value of staked SOL in USD",
                        "type": "string"
                      },
                      "stakeValueSol": {
                        "description": "The value of staked SOL in SOL",
                        "type": "string"
                      },
                      "systemValue": {
                        "description": "The value of held System SOL in USD",
                        "type": "string"
                      },
                      "tokenValue": {
                        "description": "Combined value of valid SPL tokens in USD.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockTime",
                      "tokenValue",
                      "stakeValue",
                      "systemValue",
                      "stakeValueSol"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "ownerAddress": {
                  "format": "pubkey",
                  "type": "string"
                }
              },
              "required": [
                "ownerAddress",
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "WalletBalanceTokenResultsTimeSeriesElement": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "blockTime": {
                  "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "stakeValue": {
                  "description": "The value of staked SOL in USD",
                  "type": "string"
                },
                "stakeValueSol": {
                  "description": "The value of staked SOL in SOL",
                  "type": "string"
                },
                "systemValue": {
                  "description": "The value of held System SOL in USD",
                  "type": "string"
                },
                "tokenValue": {
                  "description": "Combined value of valid SPL tokens in USD.",
                  "type": "string"
                }
              },
              "required": [
                "blockTime",
                "tokenValue",
                "stakeValue",
                "systemValue",
                "stakeValueSol"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "WalletBalanceTokenResultsTimeSeriesMany": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "properties": {
                      "blockTime": {
                        "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "stakeValue": {
                        "description": "The value of staked SOL in USD",
                        "type": "string"
                      },
                      "stakeValueSol": {
                        "description": "The value of staked SOL in SOL",
                        "type": "string"
                      },
                      "systemValue": {
                        "description": "The value of held System SOL in USD",
                        "type": "string"
                      },
                      "tokenValue": {
                        "description": "Combined value of valid SPL tokens in USD.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "blockTime",
                      "tokenValue",
                      "stakeValue",
                      "systemValue",
                      "stakeValueSol"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "ownerAddresses": {
                  "items": {
                    "format": "pubkey",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "ownerAddresses",
                "data"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      }
    },
    "schemas": {
      "AccountParamsNftsMany": {
        "properties": {
          "includeNoPriceBalance": {
            "description": "Whether or not we should include NFTs we do not track prices for.",
            "nullable": true,
            "type": "boolean"
          },
          "limit": {
            "description": "The limit of entries to return (per wallet). If not passed, first 1000 entries are returned (the maximum).",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "page": {
            "description": "The requested page.",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sortByAsc": {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "nullable": true,
            "type": "string"
          },
          "sortByDesc": {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "nullable": true,
            "type": "string"
          },
          "wallets": {
            "description": "Wallets to include in the returned results (max 10).",
            "items": {
              "format": "pubkey",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "wallets"
        ],
        "type": "object"
      },
      "AccountParamsTokens": {
        "properties": {
          "includeNoPriceBalance": {
            "description": "Whether or not we should include tokens we do not track prices for. Filtering is applied after limiting.",
            "nullable": true,
            "type": "boolean"
          },
          "limit": {
            "description": "The limit of entries to return. If not passed, first 1000 entries are returned (the maximum).",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "maxAssetValue": {
            "description": "The maximum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
            "nullable": true,
            "type": "string"
          },
          "minAssetValue": {
            "description": "The minimum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
            "nullable": true,
            "type": "string"
          },
          "onlyVerified": {
            "description": "Whether tokens returned should be restricted to verified tokens only. Default is false.",
            "nullable": true,
            "type": "boolean"
          },
          "page": {
            "description": "The requested page.",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sortByAsc": {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "nullable": true,
            "type": "string"
          },
          "sortByDesc": {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "nullable": true,
            "type": "string"
          },
          "vybeTokenFilter": {
            "description": "Whether Vybe's token filter should restrict the tokens that are returned. Default is true.",
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AccountParamsTokensMany": {
        "properties": {
          "includeNoPriceBalance": {
            "description": "Whether or not we should include tokens we do not track prices for.",
            "nullable": true,
            "type": "boolean"
          },
          "limit": {
            "description": "The limit of entries to return (per wallet). If not passed, first 1000 entries are returned (the maximum).",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "maxAssetValue": {
            "description": "The maximum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
            "nullable": true,
            "type": "string"
          },
          "minAssetValue": {
            "description": "The minimum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
            "nullable": true,
            "type": "string"
          },
          "onlyVerified": {
            "description": "Whether tokens returned should be restricted to verified tokens only. Default is false.",
            "nullable": true,
            "type": "boolean"
          },
          "page": {
            "description": "The requested page.",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sortByAsc": {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "nullable": true,
            "type": "string"
          },
          "sortByDesc": {
            "description": "Sort descending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "nullable": true,
            "type": "string"
          },
          "vybeTokenFilter": {
            "description": "Whether Vybe's token filter should restrict the tokens that are returned. Default is true.",
            "nullable": true,
            "type": "boolean"
          },
          "wallets": {
            "description": "Wallets to include in the returned results (max 10).",
            "items": {
              "format": "pubkey",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "wallets"
        ],
        "type": "object"
      },
      "AccountPnlRequestParams": {
        "properties": {
          "limit": {
            "description": "The limit of entries to return. If not passed, first 1000 entries are returned (the maximum).",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "page": {
            "description": "The requested page.",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "resolution": {
            "allOf": [
              {
                "description": "Represents the supported time-window resolutions for queries.",
                "enum": [
                  "1d",
                  "7d",
                  "30d"
                ],
                "type": "string"
              }
            ],
            "nullable": true
          },
          "sortByAsc": {
            "description": "Sort ascending by 'tokenAddress', 'tokenSymbol', 'buysTransactionCount', 'buysTokenAmount', 'buysVolumeUsd', 'sellsTransactionCount', 'sellsTokenAmount', 'sellsVolumeUsd', 'realizedPnlUsd', 'unrealizedPnlUsd'. Only one of sort_by_asc or sort_by_desc can be used.",
            "nullable": true,
            "type": "string"
          },
          "sortByDesc": {
            "description": "Sort descending by 'tokenAddress', 'tokenSymbol', 'buysTransactionCount', 'buysTokenAmount', 'buysVolumeUsd', 'sellsTransactionCount', 'sellsTokenAmount', 'sellsVolumeUsd', 'realizedPnlUsd', 'unrealizedPnlUsd'. Only one of sort_by_asc or sort_by_desc can be used.",
            "nullable": true,
            "type": "string"
          },
          "tokenAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "AccountTimeSeriesParamsMany": {
        "properties": {
          "days": {
            "description": "Number of previous days to include in the data (from today's date).\nAllowed values range from 1 to 30, default to 2 weeks (14 days)",
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "vybeTokenFilter": {
            "description": "Whether Vybe's token filter should restrict the tokens that are returned. If false, all priced tokens are included. Default is true.",
            "nullable": true,
            "type": "boolean"
          },
          "wallets": {
            "description": "Wallets to include in the returned results (max 10).",
            "items": {
              "format": "pubkey",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "wallets"
        ],
        "type": "object"
      },
      "AccountTradesSummaryReturn": {
        "description": "The overall summary and per-token metrics.",
        "properties": {
          "summary": {
            "description": "Summary of overall trading performance.",
            "properties": {
              "averageTradeUsd": {
                "description": "The average size of trades in USD.",
                "format": "double",
                "type": "number"
              },
              "bestPerformingToken": {
                "allOf": [
                  {
                    "description": "Summary of a token's performance.",
                    "properties": {
                      "pnlUsd": {
                        "description": "The profit or loss for the token in USD.",
                        "format": "double",
                        "type": "number"
                      },
                      "tokenAddress": {
                        "description": "The address of token.",
                        "type": "string"
                      },
                      "tokenLogoUrl": {
                        "description": "The logo URL of token (if any).",
                        "nullable": true,
                        "type": "string"
                      },
                      "tokenName": {
                        "description": "The name of token (if any).",
                        "nullable": true,
                        "type": "string"
                      },
                      "tokenSymbol": {
                        "description": "The symbol of token.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenSymbol",
                      "tokenAddress",
                      "pnlUsd"
                    ],
                    "type": "object"
                  }
                ],
                "nullable": true
              },
              "losingTradesCount": {
                "description": "The number of trades that resulted in a loss.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "pnlTrendSevenDays": {
                "description": "The profit and loss trend over the last seven days.",
                "items": {
                  "items": {
                    "format": "double",
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              "realizedPnlUsd": {
                "description": "The total realized profit in USD.",
                "format": "double",
                "type": "number"
              },
              "tradesCount": {
                "description": "The total number of trades executed.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "tradesVolumeUsd": {
                "description": "The total trading volume in USD.",
                "format": "double",
                "type": "number"
              },
              "uniqueTokensTraded": {
                "description": "The count of unique tokens traded by the account.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "unrealizedPnlUsd": {
                "description": "The total unrealized profit in USD.",
                "format": "double",
                "type": "number"
              },
              "winRate": {
                "description": "The percentage of winning trades (0.0 to 100.0).",
                "format": "double",
                "type": "number"
              },
              "winningTradesCount": {
                "description": "The number of trades that resulted in a profit.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "worstPerformingToken": {
                "allOf": [
                  {
                    "description": "Summary of a token's performance.",
                    "properties": {
                      "pnlUsd": {
                        "description": "The profit or loss for the token in USD.",
                        "format": "double",
                        "type": "number"
                      },
                      "tokenAddress": {
                        "description": "The address of token.",
                        "type": "string"
                      },
                      "tokenLogoUrl": {
                        "description": "The logo URL of token (if any).",
                        "nullable": true,
                        "type": "string"
                      },
                      "tokenName": {
                        "description": "The name of token (if any).",
                        "nullable": true,
                        "type": "string"
                      },
                      "tokenSymbol": {
                        "description": "The symbol of token.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tokenSymbol",
                      "tokenAddress",
                      "pnlUsd"
                    ],
                    "type": "object"
                  }
                ],
                "nullable": true
              }
            },
            "required": [
              "winRate",
              "realizedPnlUsd",
              "unrealizedPnlUsd",
              "uniqueTokensTraded",
              "averageTradeUsd",
              "tradesCount",
              "winningTradesCount",
              "losingTradesCount",
              "tradesVolumeUsd",
              "pnlTrendSevenDays"
            ],
            "type": "object"
          },
          "tokenMetrics": {
            "description": "Metrics for a token's trading performance.",
            "items": {
              "description": "Metrics for a token's trading performance.",
              "properties": {
                "buys": {
                  "description": "Summary metrics for a trade side (buy or sell).",
                  "properties": {
                    "tokenAmount": {
                      "description": "The total volume of tokens traded on this side.",
                      "format": "double",
                      "type": "number"
                    },
                    "transactionCount": {
                      "description": "The number of trades executed on this side.",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "volumeUsd": {
                      "description": "The total traded volume expressed in USD on this side.",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "required": [
                    "volumeUsd",
                    "tokenAmount",
                    "transactionCount"
                  ],
                  "type": "object"
                },
                "realizedPnlUsd": {
                  "description": "The total realized profit in USD for this token.",
                  "format": "double",
                  "type": "number"
                },
                "sells": {
                  "description": "Summary metrics for a trade side (buy or sell).",
                  "properties": {
                    "tokenAmount": {
                      "description": "The total volume of tokens traded on this side.",
                      "format": "double",
                      "type": "number"
                    },
                    "transactionCount": {
                      "description": "The number of trades executed on this side.",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "volumeUsd": {
                      "description": "The total traded volume expressed in USD on this side.",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "required": [
                    "volumeUsd",
                    "tokenAmount",
                    "transactionCount"
                  ],
                  "type": "object"
                },
                "tokenAddress": {
                  "description": "The address of the token.",
                  "type": "string"
                },
                "tokenSymbol": {
                  "description": "The symbol of the token.",
                  "type": "string"
                },
                "unrealizedPnlUsd": {
                  "description": "The total unrealized profit in USD for this token.",
                  "format": "double",
                  "type": "number"
                }
              },
              "required": [
                "tokenAddress",
                "tokenSymbol",
                "realizedPnlUsd",
                "unrealizedPnlUsd",
                "buys",
                "sells"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "summary",
          "tokenMetrics"
        ],
        "type": "object"
      },
      "ApiError": {
        "properties": {
          "code": {
            "description": "Code ID of the error, uniquely identifying the error type",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
            "type": "string"
          },
          "message": {
            "description": "A human readable message describing the error that occurred.",
            "type": "string"
          },
          "violations": {
            "description": "Optional collection of validation violations representations.",
            "items": {
              "description": "Main structure to represent any kind of validation violation.",
              "properties": {
                "invalidValue": {
                  "description": "Provided value which leaded to the violation.",
                  "nullable": true,
                  "type": "string"
                },
                "message": {
                  "description": "Message to the end user.",
                  "type": "string"
                },
                "propertyPath": {
                  "description": "Property path to the field where violation occurred.",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "code",
          "message",
          "id"
        ],
        "type": "object"
      },
      "Code": {
        "enum": [
          "RangeValidation",
          "InvalidKeySize",
          "InvalidInput",
          "SqlxError",
          "NotEnoughCred",
          "RequestQuotaReached",
          "NotWebSocketSubscription",
          "ClickhouseError",
          "RedisError",
          "InvalidInit",
          "NoResultFound",
          "InvalidResolution",
          "BigQueryError",
          "NoAuthorizationHeader",
          "DeserializationError",
          "ServerError",
          "SlowClient",
          "SlowQuery",
          "InsufficientPermissions",
          "NotFound",
          "WebSocketHandshakeGetMethodRequired",
          "WebSocketHandshakeNoWebsocketUpgrade",
          "WebSocketHandshakeNoConnectionUpgrade",
          "WebSocketHandshakeNoVersionHeader",
          "WebSocketHandshakeUnsupportedVersion",
          "WebSocketHandshakeBadWebsocketKey"
        ],
        "type": "string"
      },
      "CollectionOwner": {
        "properties": {
          "amount": {
            "description": "Amount of NFTs in this collection the address owns",
            "format": "int64",
            "type": "integer"
          },
          "owner": {
            "description": "Address of collection owner",
            "type": "string"
          }
        },
        "required": [
          "owner",
          "amount"
        ],
        "type": "object"
      },
      "CollectionOwnersResult": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount of NFTs in this collection the address owns",
                  "format": "int64",
                  "type": "integer"
                },
                "owner": {
                  "description": "Address of collection owner",
                  "type": "string"
                }
              },
              "required": [
                "owner",
                "amount"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ConstraintViolation": {
        "description": "Main structure to represent any kind of validation violation.",
        "properties": {
          "invalidValue": {
            "description": "Provided value which leaded to the violation.",
            "nullable": true,
            "type": "string"
          },
          "message": {
            "description": "Message to the end user.",
            "type": "string"
          },
          "propertyPath": {
            "description": "Property path to the field where violation occurred.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "FetcherReport": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Filters": {
        "properties": {
          "oraclePrices": {
            "description": "Live Pyth Oracle prices stream",
            "items": {
              "properties": {
                "priceFeedAccount": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "productAccount": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "tradePrices": {
            "description": "Trades based per-block average prices stream",
            "items": {
              "properties": {
                "baseMintAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "quoteMintAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "trades": {
            "description": "Live trades stream",
            "items": {
              "properties": {
                "authorityAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "baseMintAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "feePayer": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "marketId": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "programId": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "quoteMintAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "tokenMintAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "transfers": {
            "description": "Live token transfers stream",
            "items": {
              "properties": {
                "feePayer": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "maxAmount": {
                  "description": "Inclusive maximum of transfered amount\nCan be combined with [Self::min_amount]",
                  "format": "int64",
                  "minimum": 0,
                  "nullable": true,
                  "type": "integer"
                },
                "minAmount": {
                  "description": "Inclusive minimum of transfered amount\nCan be combined with [Self::max_amount]",
                  "format": "int64",
                  "minimum": 0,
                  "nullable": true,
                  "type": "integer"
                },
                "programId": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "receiverAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "receiverTokenAccount": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "senderAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "senderTokenAccount": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                },
                "tokenMintAddress": {
                  "allOf": [
                    {
                      "format": "pubkey",
                      "type": "string"
                    }
                  ],
                  "nullable": true
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "InstructionName": {
        "properties": {
          "callingInstructions": {
            "format": "binary",
            "type": "string"
          },
          "callingProgram": {
            "type": "string"
          },
          "ixName": {
            "type": "string"
          },
          "programName": {
            "type": "string"
          }
        },
        "required": [
          "callingInstructions",
          "ixName",
          "callingProgram",
          "programName"
        ],
        "type": "object"
      },
      "InstructionNameList": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "callingInstructions": {
                  "format": "binary",
                  "type": "string"
                },
                "callingProgram": {
                  "type": "string"
                },
                "ixName": {
                  "type": "string"
                },
                "programName": {
                  "type": "string"
                }
              },
              "required": [
                "callingInstructions",
                "ixName",
                "callingProgram",
                "programName"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JoinedNftData": {
        "properties": {
          "certainty": {
            "description": "Level of confidence for NFT match, a value between 0 and 1",
            "format": "double",
            "type": "number"
          },
          "collectionAddress": {
            "format": "pubkey",
            "type": "string"
          },
          "collectionName": {
            "description": "NFT collection name",
            "type": "string"
          },
          "imageUrl": {
            "description": "NFT image url",
            "nullable": true,
            "type": "string"
          },
          "mintAddress": {
            "format": "pubkey",
            "type": "string"
          },
          "ownerAddress": {
            "format": "pubkey",
            "type": "string"
          },
          "tokenName": {
            "description": "NFT token name",
            "type": "string"
          }
        },
        "required": [
          "ownerAddress",
          "mintAddress",
          "collectionAddress",
          "collectionName",
          "tokenName",
          "certainty"
        ],
        "type": "object"
      },
      "JoinedNftResponse": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "certainty": {
                  "description": "Level of confidence for NFT match, a value between 0 and 1",
                  "format": "double",
                  "type": "number"
                },
                "collectionAddress": {
                  "format": "pubkey",
                  "type": "string"
                },
                "collectionName": {
                  "description": "NFT collection name",
                  "type": "string"
                },
                "imageUrl": {
                  "description": "NFT image url",
                  "nullable": true,
                  "type": "string"
                },
                "mintAddress": {
                  "format": "pubkey",
                  "type": "string"
                },
                "ownerAddress": {
                  "format": "pubkey",
                  "type": "string"
                },
                "tokenName": {
                  "description": "NFT token name",
                  "type": "string"
                }
              },
              "required": [
                "ownerAddress",
                "mintAddress",
                "collectionAddress",
                "collectionName",
                "tokenName",
                "certainty"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "KnownAccountReturn": {
        "properties": {
          "dateAdded": {
            "description": "Date added to the database",
            "format": "date-time",
            "type": "string"
          },
          "entity": {
            "description": "Account entity, if available",
            "nullable": true,
            "type": "string"
          },
          "entityId": {
            "description": "Account entity ID, if available",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "labels": {
            "description": "Account labels, eg: DEFI,NFT",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logoUrl": {
            "description": "Account logo URL, if available",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Account name",
            "nullable": true,
            "type": "string"
          },
          "ownerAddress": {
            "description": "The public key (pubKey) associated with the Solana account",
            "type": "string"
          },
          "twitterUrl": {
            "description": "Twiiter url for the account",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "ownerAddress",
          "labels",
          "dateAdded"
        ],
        "type": "object"
      },
      "KnownAccountVecReturn": {
        "properties": {
          "accounts": {
            "description": "Found accounts",
            "items": {
              "properties": {
                "dateAdded": {
                  "description": "Date added to the database",
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "description": "Account entity, if available",
                  "nullable": true,
                  "type": "string"
                },
                "entityId": {
                  "description": "Account entity ID, if available",
                  "format": "int32",
                  "nullable": true,
                  "type": "integer"
                },
                "labels": {
                  "description": "Account labels, eg: DEFI,NFT",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "logoUrl": {
                  "description": "Account logo URL, if available",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Account name",
                  "nullable": true,
                  "type": "string"
                },
                "ownerAddress": {
                  "description": "The public key (pubKey) associated with the Solana account",
                  "type": "string"
                },
                "twitterUrl": {
                  "description": "Twiiter url for the account",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "ownerAddress",
                "labels",
                "dateAdded"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "accounts"
        ],
        "type": "object"
      },
      "KnownProgramReturn": {
        "properties": {
          "dateAdded": {
            "description": "Date added to the database",
            "format": "date-time",
            "type": "string"
          },
          "defiLlamaId": {
            "description": "Program DeFi Llama ID",
            "nullable": true,
            "type": "string"
          },
          "entityId": {
            "description": "Program entity ID",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "entityName": {
            "description": "Name of the business or entity that controls this program",
            "nullable": true,
            "type": "string"
          },
          "idlUrl": {
            "description": "Program IDL URL",
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "description": "Program labels, eg: DEFI,NFT",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logoUrl": {
            "description": "Program logo URL",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Program name",
            "nullable": true,
            "type": "string"
          },
          "programDescription": {
            "description": "Program description",
            "nullable": true,
            "type": "string"
          },
          "programDetail": {
            "description": "Program detail",
            "nullable": true,
            "type": "string"
          },
          "programId": {
            "description": "Program ID",
            "type": "string"
          },
          "siteUrl": {
            "description": "Program site URL",
            "nullable": true,
            "type": "string"
          },
          "twitterUrl": {
            "description": "Twiiter url for the program account",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "programId",
          "labels",
          "dateAdded"
        ],
        "type": "object"
      },
      "KnownProgramVecReturn": {
        "properties": {
          "programs": {
            "description": "List of found programs",
            "items": {
              "properties": {
                "dateAdded": {
                  "description": "Date added to the database",
                  "format": "date-time",
                  "type": "string"
                },
                "defiLlamaId": {
                  "description": "Program DeFi Llama ID",
                  "nullable": true,
                  "type": "string"
                },
                "entityId": {
                  "description": "Program entity ID",
                  "format": "int32",
                  "nullable": true,
                  "type": "integer"
                },
                "entityName": {
                  "description": "Name of the business or entity that controls this program",
                  "nullable": true,
                  "type": "string"
                },
                "idlUrl": {
                  "description": "Program IDL URL",
                  "nullable": true,
                  "type": "string"
                },
                "labels": {
                  "description": "Program labels, eg: DEFI,NFT",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "logoUrl": {
                  "description": "Program logo URL",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Program name",
                  "nullable": true,
                  "type": "string"
                },
                "programDescription": {
                  "description": "Program description",
                  "nullable": true,
                  "type": "string"
                },
                "programDetail": {
                  "description": "Program detail",
                  "nullable": true,
                  "type": "string"
                },
                "programId": {
                  "description": "Program ID",
                  "type": "string"
                },
                "siteUrl": {
                  "description": "Program site URL",
                  "nullable": true,
                  "type": "string"
                },
                "twitterUrl": {
                  "description": "Twiiter url for the program account",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "programId",
                "labels",
                "dateAdded"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "programs"
        ],
        "type": "object"
      },
      "MarketOhlcvCandleReturn": {
        "properties": {
          "close": {
            "type": "string"
          },
          "count": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "high": {
            "type": "string"
          },
          "low": {
            "type": "string"
          },
          "open": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          },
          "volume": {
            "type": "string"
          }
        },
        "required": [
          "time",
          "open",
          "high",
          "low",
          "close",
          "volume",
          "count"
        ],
        "type": "object"
      },
      "MarketOhlcvCandleVecReturn": {
        "properties": {
          "data": {
            "description": "Found OHLCV data",
            "items": {
              "properties": {
                "close": {
                  "type": "string"
                },
                "count": {
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "high": {
                  "type": "string"
                },
                "low": {
                  "type": "string"
                },
                "open": {
                  "type": "string"
                },
                "time": {
                  "format": "int64",
                  "type": "integer"
                },
                "volume": {
                  "type": "string"
                }
              },
              "required": [
                "time",
                "open",
                "high",
                "low",
                "close",
                "volume",
                "count"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MarketsReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "baseTokenMint": {
                  "format": "pubkey",
                  "type": "string"
                },
                "baseTokenName": {
                  "description": "Name of the base token",
                  "nullable": true,
                  "type": "string"
                },
                "baseTokenSymbol": {
                  "description": "Ticker for the base token",
                  "nullable": true,
                  "type": "string"
                },
                "marketId": {
                  "format": "pubkey",
                  "type": "string"
                },
                "marketName": {
                  "description": "Name of the market",
                  "nullable": true,
                  "type": "string"
                },
                "programId": {
                  "format": "pubkey",
                  "type": "string"
                },
                "programName": {
                  "description": "Name of the program",
                  "nullable": true,
                  "type": "string"
                },
                "quoteTokenMint": {
                  "format": "pubkey",
                  "type": "string"
                },
                "quoteTokenName": {
                  "description": "Name of the quote token",
                  "nullable": true,
                  "type": "string"
                },
                "quoteTokenSymbol": {
                  "description": "Ticker for the quote token",
                  "nullable": true,
                  "type": "string"
                },
                "updatedAt": {
                  "description": "Latest update Time",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "marketId",
                "programId",
                "baseTokenMint",
                "quoteTokenMint",
                "updatedAt"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "Metrics": {
        "description": "Metrics for a token's trading performance.",
        "properties": {
          "buys": {
            "description": "Summary metrics for a trade side (buy or sell).",
            "properties": {
              "tokenAmount": {
                "description": "The total volume of tokens traded on this side.",
                "format": "double",
                "type": "number"
              },
              "transactionCount": {
                "description": "The number of trades executed on this side.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "volumeUsd": {
                "description": "The total traded volume expressed in USD on this side.",
                "format": "double",
                "type": "number"
              }
            },
            "required": [
              "volumeUsd",
              "tokenAmount",
              "transactionCount"
            ],
            "type": "object"
          },
          "realizedPnlUsd": {
            "description": "The total realized profit in USD for this token.",
            "format": "double",
            "type": "number"
          },
          "sells": {
            "description": "Summary metrics for a trade side (buy or sell).",
            "properties": {
              "tokenAmount": {
                "description": "The total volume of tokens traded on this side.",
                "format": "double",
                "type": "number"
              },
              "transactionCount": {
                "description": "The number of trades executed on this side.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "volumeUsd": {
                "description": "The total traded volume expressed in USD on this side.",
                "format": "double",
                "type": "number"
              }
            },
            "required": [
              "volumeUsd",
              "tokenAmount",
              "transactionCount"
            ],
            "type": "object"
          },
          "tokenAddress": {
            "description": "The address of the token.",
            "type": "string"
          },
          "tokenSymbol": {
            "description": "The symbol of the token.",
            "type": "string"
          },
          "unrealizedPnlUsd": {
            "description": "The total unrealized profit in USD for this token.",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "tokenAddress",
          "tokenSymbol",
          "realizedPnlUsd",
          "unrealizedPnlUsd",
          "buys",
          "sells"
        ],
        "type": "object"
      },
      "NftUrlSearchBody": {
        "properties": {
          "url": {
            "description": "Url for requested nft",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "ProgramActiveUsers": {
        "properties": {
          "instructions": {
            "description": "Amount of instructions triggered by the user",
            "format": "int64",
            "type": "integer"
          },
          "programId": {
            "description": "Id of requested program",
            "type": "string"
          },
          "transactions": {
            "description": "Amount of transactions triggered by the user",
            "format": "int64",
            "type": "integer"
          },
          "wallet": {
            "description": "User's wallet id",
            "type": "string"
          }
        },
        "required": [
          "programId",
          "wallet",
          "transactions",
          "instructions"
        ],
        "type": "object"
      },
      "ProgramActiveUsersCount": {
        "properties": {
          "blockTime": {
            "description": "Block time",
            "format": "int64",
            "type": "integer"
          },
          "dau": {
            "description": "Count of unique fee payers in the selected resolution",
            "format": "int64",
            "type": "integer"
          },
          "programId": {
            "description": "Unique public key for a Solana program",
            "type": "string"
          }
        },
        "required": [
          "programId",
          "dau",
          "blockTime"
        ],
        "type": "object"
      },
      "ProgramDetails": {
        "properties": {
          "dau": {
            "description": "Unique fee payers in the last day",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "entityName": {
            "description": "Name of the business or entity that controls this program",
            "nullable": true,
            "type": "string"
          },
          "friendlyName": {
            "description": "Friendly name",
            "nullable": true,
            "type": "string"
          },
          "idlUrl": {
            "description": "Program IDL URL",
            "nullable": true,
            "type": "string"
          },
          "instructions1d": {
            "description": "Instruction count in 1 day",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "labels": {
            "description": "Labels to filter over. Only programs matching all labels will be returned (eg. labels=DEFI,NFT)",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "logoUrl": {
            "description": "Program logo URL",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Program name",
            "nullable": true,
            "type": "string"
          },
          "newUsersChange1d": {
            "description": "1 day change in DAU",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "programDescription": {
            "description": "Program description",
            "nullable": true,
            "type": "string"
          },
          "programDetail": {
            "description": "Program detail",
            "nullable": true,
            "type": "string"
          },
          "programId": {
            "description": "Program ID",
            "type": "string"
          },
          "transactions1d": {
            "description": "Total transactions in 1 day",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "programId"
        ],
        "type": "object"
      },
      "ProgramInstructionName": {
        "properties": {
          "callingInstructions": {
            "format": "binary",
            "type": "string"
          },
          "callingProgram": {
            "type": "string"
          },
          "ixName": {
            "type": "string"
          },
          "programLogoUrl": {
            "type": "string"
          },
          "programName": {
            "type": "string"
          }
        },
        "required": [
          "callingInstructions",
          "ixName",
          "callingProgram",
          "programName",
          "programLogoUrl"
        ],
        "type": "object"
      },
      "ProgramInstructionsCount": {
        "properties": {
          "blockTime": {
            "description": "Block time",
            "format": "int64",
            "type": "integer"
          },
          "instructionsCount": {
            "description": "Instructions count",
            "format": "int64",
            "type": "integer"
          },
          "programId": {
            "description": "Unique public key for a Solana program",
            "type": "string"
          }
        },
        "required": [
          "programId",
          "instructionsCount",
          "blockTime"
        ],
        "type": "object"
      },
      "ProgramRankHelper": {
        "properties": {
          "programId": {
            "description": "Program address in base 58 format",
            "type": "string"
          },
          "programName": {
            "description": "Program Name - null if we dont have it in the dict",
            "nullable": true,
            "type": "string"
          },
          "programRank": {
            "description": "Program rank for the day",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "score": {
            "description": "rank score after calculation",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "programRank",
          "programId",
          "score"
        ],
        "type": "object"
      },
      "ProgramRanks": {
        "properties": {
          "data": {
            "description": "The Ranked programs",
            "items": {
              "properties": {
                "programId": {
                  "description": "Program address in base 58 format",
                  "type": "string"
                },
                "programName": {
                  "description": "Program Name - null if we dont have it in the dict",
                  "nullable": true,
                  "type": "string"
                },
                "programRank": {
                  "description": "Program rank for the day",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "score": {
                  "description": "rank score after calculation",
                  "format": "double",
                  "type": "number"
                }
              },
              "required": [
                "programRank",
                "programId",
                "score"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "description": "The epoch used to get the ranks for",
            "format": "int64",
            "type": "integer"
          },
          "interval": {
            "description": "Interval between the ranks - Possible values: '1d', '7d' or '30d'",
            "type": "string"
          },
          "limit": {
            "description": "The number of ranks returned",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "date",
          "interval",
          "limit",
          "data"
        ],
        "type": "object"
      },
      "ProgramTransactionsCount": {
        "properties": {
          "blockTime": {
            "description": "Block time",
            "format": "int64",
            "type": "integer"
          },
          "programId": {
            "description": "Unique public key for a Solana program",
            "type": "string"
          },
          "transactionsCount": {
            "description": "Transactions count",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "programId",
          "transactionsCount",
          "blockTime"
        ],
        "type": "object"
      },
      "ProgramTvl": {
        "properties": {
          "time": {
            "description": "time as TIMESTAMPTZ",
            "format": "date-time",
            "type": "string"
          },
          "tvl": {
            "description": "Programs TVL",
            "type": "string"
          }
        },
        "required": [
          "tvl",
          "time"
        ],
        "type": "object"
      },
      "ProgramsActiveUsersCountVecReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "blockTime": {
                  "description": "Block time",
                  "format": "int64",
                  "type": "integer"
                },
                "dau": {
                  "description": "Count of unique fee payers in the selected resolution",
                  "format": "int64",
                  "type": "integer"
                },
                "programId": {
                  "description": "Unique public key for a Solana program",
                  "type": "string"
                }
              },
              "required": [
                "programId",
                "dau",
                "blockTime"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ProgramsActiveUsersVecReturn": {
        "properties": {
          "data": {
            "description": "Found active users",
            "items": {
              "properties": {
                "instructions": {
                  "description": "Amount of instructions triggered by the user",
                  "format": "int64",
                  "type": "integer"
                },
                "programId": {
                  "description": "Id of requested program",
                  "type": "string"
                },
                "transactions": {
                  "description": "Amount of transactions triggered by the user",
                  "format": "int64",
                  "type": "integer"
                },
                "wallet": {
                  "description": "User's wallet id",
                  "type": "string"
                }
              },
              "required": [
                "programId",
                "wallet",
                "transactions",
                "instructions"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ProgramsInstructionsCountVecReturn": {
        "properties": {
          "data": {
            "description": "Found instructions count",
            "items": {
              "properties": {
                "blockTime": {
                  "description": "Block time",
                  "format": "int64",
                  "type": "integer"
                },
                "instructionsCount": {
                  "description": "Instructions count",
                  "format": "int64",
                  "type": "integer"
                },
                "programId": {
                  "description": "Unique public key for a Solana program",
                  "type": "string"
                }
              },
              "required": [
                "programId",
                "instructionsCount",
                "blockTime"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ProgramsListResponse": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "dau": {
                  "description": "Unique fee payers in the last day",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                },
                "entityName": {
                  "description": "Name of the business or entity that controls this program",
                  "nullable": true,
                  "type": "string"
                },
                "friendlyName": {
                  "description": "Friendly name",
                  "nullable": true,
                  "type": "string"
                },
                "idlUrl": {
                  "description": "Program IDL URL",
                  "nullable": true,
                  "type": "string"
                },
                "instructions1d": {
                  "description": "Instruction count in 1 day",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                },
                "labels": {
                  "description": "Labels to filter over. Only programs matching all labels will be returned (eg. labels=DEFI,NFT)",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "type": "array"
                },
                "logoUrl": {
                  "description": "Program logo URL",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Program name",
                  "nullable": true,
                  "type": "string"
                },
                "newUsersChange1d": {
                  "description": "1 day change in DAU",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                },
                "programDescription": {
                  "description": "Program description",
                  "nullable": true,
                  "type": "string"
                },
                "programDetail": {
                  "description": "Program detail",
                  "nullable": true,
                  "type": "string"
                },
                "programId": {
                  "description": "Program ID",
                  "type": "string"
                },
                "transactions1d": {
                  "description": "Total transactions in 1 day",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                }
              },
              "required": [
                "programId"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ProgramsTransactionsCountVecReturn": {
        "properties": {
          "data": {
            "description": "Found transactions count",
            "items": {
              "properties": {
                "blockTime": {
                  "description": "Block time",
                  "format": "int64",
                  "type": "integer"
                },
                "programId": {
                  "description": "Unique public key for a Solana program",
                  "type": "string"
                },
                "transactionsCount": {
                  "description": "Transactions count",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "programId",
                "transactionsCount",
                "blockTime"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ProgramsTvlVecReturn": {
        "properties": {
          "data": {
            "description": "Found TVLs for program",
            "items": {
              "properties": {
                "time": {
                  "description": "time as TIMESTAMPTZ",
                  "format": "date-time",
                  "type": "string"
                },
                "tvl": {
                  "description": "Programs TVL",
                  "type": "string"
                }
              },
              "required": [
                "tvl",
                "time"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "PythPriceFeed": {
        "description": "User-facing Pyth price feed update",
        "properties": {
          "confidence": {
            "description": "Confidence interval of how close we think the true price is to the average.\nIt's influenced by both how sure each person quoting the price is, and how much they agree with each other.",
            "type": "string"
          },
          "emac1H": {
            "description": "Exponentially-weighted moving average confidence interval is a time-weighted average of the confidence interval",
            "type": "string"
          },
          "emap1H": {
            "description": "Exponentially-weighted moving average price is a time-weighted average of the aggregate price",
            "type": "string"
          },
          "lastUpdated": {
            "description": "The last updated time",
            "format": "int64",
            "type": "integer"
          },
          "price": {
            "description": "Price of asset expressed in USD",
            "type": "string"
          },
          "priceFeedAccount": {
            "format": "pubkey",
            "type": "string"
          },
          "validSlot": {
            "description": "The last valid slot",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "priceFeedAccount",
          "lastUpdated",
          "validSlot",
          "price",
          "confidence",
          "emac1H",
          "emap1H"
        ],
        "type": "object"
      },
      "PythPriceFeedsTimeSeriesReturn": {
        "properties": {
          "data": {
            "items": {
              "description": "User-facing Pyth price feed update",
              "properties": {
                "confidence": {
                  "description": "Confidence interval of how close we think the true price is to the average.\nIt's influenced by both how sure each person quoting the price is, and how much they agree with each other.",
                  "type": "string"
                },
                "emac1H": {
                  "description": "Exponentially-weighted moving average confidence interval is a time-weighted average of the confidence interval",
                  "type": "string"
                },
                "emap1H": {
                  "description": "Exponentially-weighted moving average price is a time-weighted average of the aggregate price",
                  "type": "string"
                },
                "lastUpdated": {
                  "description": "The last updated time",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price of asset expressed in USD",
                  "type": "string"
                },
                "priceFeedAccount": {
                  "format": "pubkey",
                  "type": "string"
                },
                "validSlot": {
                  "description": "The last valid slot",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "priceFeedAccount",
                "lastUpdated",
                "validSlot",
                "price",
                "confidence",
                "emac1H",
                "emap1H"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "PythPriceOhlc": {
        "properties": {
          "avgConf": {
            "description": "Average confidence",
            "type": "string"
          },
          "avgPrice": {
            "description": "Average price",
            "type": "string"
          },
          "close": {
            "description": "Close price",
            "type": "string"
          },
          "high": {
            "description": "High price",
            "type": "string"
          },
          "low": {
            "description": "Low price",
            "type": "string"
          },
          "open": {
            "description": "Open price",
            "type": "string"
          },
          "timeBucketStart": {
            "description": "Time bucket start",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "timeBucketStart",
          "open",
          "high",
          "low",
          "close",
          "avgPrice",
          "avgConf"
        ],
        "type": "object"
      },
      "PythPriceOhlcReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "avgConf": {
                  "description": "Average confidence",
                  "type": "string"
                },
                "avgPrice": {
                  "description": "Average price",
                  "type": "string"
                },
                "close": {
                  "description": "Close price",
                  "type": "string"
                },
                "high": {
                  "description": "High price",
                  "type": "string"
                },
                "low": {
                  "description": "Low price",
                  "type": "string"
                },
                "open": {
                  "description": "Open price",
                  "type": "string"
                },
                "timeBucketStart": {
                  "description": "Time bucket start",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "timeBucketStart",
                "open",
                "high",
                "low",
                "close",
                "avgPrice",
                "avgConf"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "PythPriceProductPair": {
        "properties": {
          "priceFeedId": {
            "description": "The pubkey identifying the Pyth Price feed account.",
            "type": "string"
          },
          "productId": {
            "description": "The pubkey identifying the Pyth Product account.",
            "type": "string"
          },
          "symbol": {
            "description": "The Pyth asset symbol",
            "type": "string"
          }
        },
        "required": [
          "productId",
          "priceFeedId",
          "symbol"
        ],
        "type": "object"
      },
      "PythPriceProductPairsReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "priceFeedId": {
                  "description": "The pubkey identifying the Pyth Price feed account.",
                  "type": "string"
                },
                "productId": {
                  "description": "The pubkey identifying the Pyth Product account.",
                  "type": "string"
                },
                "symbol": {
                  "description": "The Pyth asset symbol",
                  "type": "string"
                }
              },
              "required": [
                "productId",
                "priceFeedId",
                "symbol"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "PythProduct": {
        "allOf": [
          {
            "allOf": [
              {
                "oneOf": [
                  {
                    "properties": {
                      "schedule": {
                        "description": "Weekly schedule",
                        "type": "string"
                      }
                    },
                    "required": [
                      "schedule"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "umtf": {
                        "description": "UMTF",
                        "type": "string"
                      }
                    },
                    "required": [
                      "umtf"
                    ],
                    "type": "object"
                  }
                ]
              }
            ],
            "nullable": true
          },
          {
            "oneOf": [
              {
                "properties": {
                  "genericSymbol": {
                    "description": "Ticker symbol",
                    "type": "string"
                  }
                },
                "required": [
                  "genericSymbol"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "cmsSymbol": {
                    "description": "CMS market symbol",
                    "type": "string"
                  },
                  "cqsSymbol": {
                    "description": "CQS market symbol",
                    "type": "string"
                  },
                  "nasdaqSymbol": {
                    "description": "Nasdaq market symbol",
                    "type": "string"
                  }
                },
                "required": [
                  "cmsSymbol",
                  "cqsSymbol",
                  "nasdaqSymbol"
                ],
                "type": "object"
              }
            ]
          },
          {
            "properties": {
              "assetType": {
                "description": "The asset class: Crypto, Equity, FX, Metal, Rates, Commodities",
                "type": "string"
              },
              "base": {
                "description": "Base asset. Can be present for everything except rates and commodities.",
                "nullable": true,
                "type": "string"
              },
              "country": {
                "description": "The country code. Can be present for equity only.",
                "nullable": true,
                "type": "string"
              },
              "description": {
                "description": "Pair name",
                "type": "string"
              },
              "productId": {
                "description": "The pubkey identifying the Pyth Product.",
                "type": "string"
              },
              "quote": {
                "description": "Quote currency. Can be present for everything except rates and commodities.",
                "nullable": true,
                "type": "string"
              },
              "symbol": {
                "description": "Pyth asset symbol",
                "type": "string"
              },
              "tenor": {
                "description": "The tenor. Can be present for FX or equity only.",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "productId",
              "description",
              "symbol",
              "assetType"
            ],
            "type": "object"
          }
        ],
        "description": "Structure corresponding to what we will fetch in the API\nThis is saved to a json file"
      },
      "PythProductSchedule": {
        "oneOf": [
          {
            "properties": {
              "schedule": {
                "description": "Weekly schedule",
                "type": "string"
              }
            },
            "required": [
              "schedule"
            ],
            "type": "object"
          },
          {
            "properties": {
              "umtf": {
                "description": "UMTF",
                "type": "string"
              }
            },
            "required": [
              "umtf"
            ],
            "type": "object"
          }
        ]
      },
      "PythProductSymbols": {
        "oneOf": [
          {
            "properties": {
              "genericSymbol": {
                "description": "Ticker symbol",
                "type": "string"
              }
            },
            "required": [
              "genericSymbol"
            ],
            "type": "object"
          },
          {
            "properties": {
              "cmsSymbol": {
                "description": "CMS market symbol",
                "type": "string"
              },
              "cqsSymbol": {
                "description": "CQS market symbol",
                "type": "string"
              },
              "nasdaqSymbol": {
                "description": "Nasdaq market symbol",
                "type": "string"
              }
            },
            "required": [
              "cmsSymbol",
              "cqsSymbol",
              "nasdaqSymbol"
            ],
            "type": "object"
          }
        ]
      },
      "PythUpdatesFilter": {
        "properties": {
          "priceFeedAccount": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "productAccount": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "RecentRange": {
        "format": "recent_range",
        "type": "string"
      },
      "Resolution": {
        "description": "Represents the supported time-window resolutions for queries.",
        "enum": [
          "1d",
          "7d",
          "30d"
        ],
        "type": "string"
      },
      "ResolutionDeprecated": {
        "format": "resolution",
        "type": "string"
      },
      "SolanaId": {
        "format": "pubkey",
        "type": "string"
      },
      "Summary": {
        "description": "Summary of overall trading performance.",
        "properties": {
          "averageTradeUsd": {
            "description": "The average size of trades in USD.",
            "format": "double",
            "type": "number"
          },
          "bestPerformingToken": {
            "allOf": [
              {
                "description": "Summary of a token's performance.",
                "properties": {
                  "pnlUsd": {
                    "description": "The profit or loss for the token in USD.",
                    "format": "double",
                    "type": "number"
                  },
                  "tokenAddress": {
                    "description": "The address of token.",
                    "type": "string"
                  },
                  "tokenLogoUrl": {
                    "description": "The logo URL of token (if any).",
                    "nullable": true,
                    "type": "string"
                  },
                  "tokenName": {
                    "description": "The name of token (if any).",
                    "nullable": true,
                    "type": "string"
                  },
                  "tokenSymbol": {
                    "description": "The symbol of token.",
                    "type": "string"
                  }
                },
                "required": [
                  "tokenSymbol",
                  "tokenAddress",
                  "pnlUsd"
                ],
                "type": "object"
              }
            ],
            "nullable": true
          },
          "losingTradesCount": {
            "description": "The number of trades that resulted in a loss.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "pnlTrendSevenDays": {
            "description": "The profit and loss trend over the last seven days.",
            "items": {
              "items": {
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "type": "array"
          },
          "realizedPnlUsd": {
            "description": "The total realized profit in USD.",
            "format": "double",
            "type": "number"
          },
          "tradesCount": {
            "description": "The total number of trades executed.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "tradesVolumeUsd": {
            "description": "The total trading volume in USD.",
            "format": "double",
            "type": "number"
          },
          "uniqueTokensTraded": {
            "description": "The count of unique tokens traded by the account.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "unrealizedPnlUsd": {
            "description": "The total unrealized profit in USD.",
            "format": "double",
            "type": "number"
          },
          "winRate": {
            "description": "The percentage of winning trades (0.0 to 100.0).",
            "format": "double",
            "type": "number"
          },
          "winningTradesCount": {
            "description": "The number of trades that resulted in a profit.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "worstPerformingToken": {
            "allOf": [
              {
                "description": "Summary of a token's performance.",
                "properties": {
                  "pnlUsd": {
                    "description": "The profit or loss for the token in USD.",
                    "format": "double",
                    "type": "number"
                  },
                  "tokenAddress": {
                    "description": "The address of token.",
                    "type": "string"
                  },
                  "tokenLogoUrl": {
                    "description": "The logo URL of token (if any).",
                    "nullable": true,
                    "type": "string"
                  },
                  "tokenName": {
                    "description": "The name of token (if any).",
                    "nullable": true,
                    "type": "string"
                  },
                  "tokenSymbol": {
                    "description": "The symbol of token.",
                    "type": "string"
                  }
                },
                "required": [
                  "tokenSymbol",
                  "tokenAddress",
                  "pnlUsd"
                ],
                "type": "object"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "winRate",
          "realizedPnlUsd",
          "unrealizedPnlUsd",
          "uniqueTokensTraded",
          "averageTradeUsd",
          "tradesCount",
          "winningTradesCount",
          "losingTradesCount",
          "tradesVolumeUsd",
          "pnlTrendSevenDays"
        ],
        "type": "object"
      },
      "TokenBalance": {
        "properties": {
          "amount": {
            "description": "Amount of the token",
            "type": "string"
          },
          "category": {
            "description": "Category for the token",
            "nullable": true,
            "type": "string"
          },
          "decimals": {
            "description": "Decimals for the token",
            "format": "int64",
            "type": "integer"
          },
          "logoUrl": {
            "description": "Logo URL for the token",
            "nullable": true,
            "type": "string"
          },
          "mintAddress": {
            "description": "Address for the token",
            "type": "string"
          },
          "name": {
            "description": "Name for the token, can be null for unknown addresses",
            "nullable": true,
            "type": "string"
          },
          "priceUsd": {
            "description": "Average price of the token in USD",
            "type": "string"
          },
          "priceUsd1dChange": {
            "description": "Change in the price of the token in USD over the last 24 hours",
            "type": "string"
          },
          "priceUsd7dTrend": {
            "description": "7 day trend of the token price in USD",
            "type": "string"
          },
          "slot": {
            "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
            "format": "int64",
            "type": "integer"
          },
          "symbol": {
            "description": "Symbol for the token, can be null for unknown addresses",
            "nullable": true,
            "type": "string"
          },
          "valueUsd": {
            "description": "Value of the held tokens in USD",
            "type": "string"
          },
          "valueUsd1dChange": {
            "description": "Change in the value of the held tokens in USD over the last 24 hours",
            "type": "string"
          },
          "verified": {
            "description": "Whether the token is verified or not.",
            "type": "boolean"
          }
        },
        "required": [
          "mintAddress",
          "amount",
          "priceUsd",
          "priceUsd1dChange",
          "priceUsd7dTrend",
          "valueUsd",
          "valueUsd1dChange",
          "decimals",
          "verified",
          "slot"
        ],
        "type": "object"
      },
      "TokenBalanceNft": {
        "properties": {
          "collectionAddress": {
            "description": "Public key of the NFT collection",
            "type": "string"
          },
          "logoUrl": {
            "description": "Logo URL for the NFT",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Symbol for the NFT",
            "nullable": true,
            "type": "string"
          },
          "priceSol": {
            "description": "Price of the NFT in SOL",
            "type": "string"
          },
          "priceUsd": {
            "description": "Price of the NFT in USD",
            "type": "string"
          },
          "slot": {
            "description": "Slot for the most recent update to the NFT balance",
            "format": "int64",
            "type": "integer"
          },
          "totalItems": {
            "description": "Amount of the NFT",
            "format": "int32",
            "type": "integer"
          },
          "valueSol": {
            "description": "Value of the held NFT in SOL",
            "type": "string"
          },
          "valueUsd": {
            "description": "Value of the held NFT in USD",
            "type": "string"
          }
        },
        "required": [
          "collectionAddress",
          "totalItems",
          "valueSol",
          "priceSol",
          "valueUsd",
          "priceUsd",
          "slot"
        ],
        "type": "object"
      },
      "TokenData": {
        "properties": {
          "decimal": {
            "description": "Decimal of the token",
            "format": "int32",
            "type": "integer"
          },
          "insertTime": {
            "description": "The time the data was inserted into the database",
            "format": "int64",
            "type": "integer"
          },
          "mintAddress": {
            "description": "The public key of the token of interest",
            "type": "string"
          },
          "name": {
            "description": "The name of the token",
            "type": "string"
          },
          "price": {
            "description": "The price of the token",
            "type": "string"
          },
          "symbol": {
            "description": "The symbol of the token",
            "type": "string"
          }
        },
        "required": [
          "symbol",
          "name",
          "mintAddress",
          "price",
          "decimal",
          "insertTime"
        ],
        "type": "object"
      },
      "TokenHoldersTimeSeriesData": {
        "properties": {
          "holdersTimestamp": {
            "description": "Unix timestamp of the record.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "nDust": {
            "description": "Number of dust accounts at the instant. (< 100 tokens)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nHolders": {
            "description": "Number of token holders at the instant.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nLarge": {
            "description": "Number of large accounts at the instant. (between 10000 and 100000 tokens)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nMedium": {
            "description": "Number of medium accounts at the instant. (between 1000 and 10000 tokens)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nSmall": {
            "description": "Number of small accounts at the instant. (between 100 and 1000 tokens)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nWhale": {
            "description": "Number of whale accounts at the instant. (> 100000 tokens)",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "holdersTimestamp",
          "nHolders",
          "nDust",
          "nSmall",
          "nMedium",
          "nLarge",
          "nWhale"
        ],
        "type": "object"
      },
      "TokenHoldersTimeSeriesInterval": {
        "description": "Enumerates the supported time intervals for token holders.",
        "enum": [
          "hour",
          "day"
        ],
        "type": "string"
      },
      "TokenHoldersTimeSeriesReturn": {
        "properties": {
          "data": {
            "description": "Token holders time series data.",
            "items": {
              "properties": {
                "holdersTimestamp": {
                  "description": "Unix timestamp of the record.",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "nDust": {
                  "description": "Number of dust accounts at the instant. (< 100 tokens)",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "nHolders": {
                  "description": "Number of token holders at the instant.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "nLarge": {
                  "description": "Number of large accounts at the instant. (between 10000 and 100000 tokens)",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "nMedium": {
                  "description": "Number of medium accounts at the instant. (between 1000 and 10000 tokens)",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "nSmall": {
                  "description": "Number of small accounts at the instant. (between 100 and 1000 tokens)",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "nWhale": {
                  "description": "Number of whale accounts at the instant. (> 100000 tokens)",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "holdersTimestamp",
                "nHolders",
                "nDust",
                "nSmall",
                "nMedium",
                "nLarge",
                "nWhale"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TokenInformationCH": {
        "properties": {
          "category": {
            "description": "Category of the token",
            "nullable": true,
            "type": "string"
          },
          "currentSupply": {
            "description": "Current token supply",
            "format": "double",
            "type": "number"
          },
          "decimal": {
            "description": "Decimal places",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "logoUrl": {
            "description": "Logo associated with the token",
            "nullable": true,
            "type": "string"
          },
          "marketCap": {
            "description": "Current token market cap",
            "format": "double",
            "type": "number"
          },
          "mintAddress": {
            "description": "The public key of the token of interest",
            "type": "string"
          },
          "name": {
            "description": "Token mint name",
            "nullable": true,
            "type": "string"
          },
          "price": {
            "description": "Current price in USD",
            "format": "double",
            "type": "number"
          },
          "price1d": {
            "description": "Price in USD of the token 1 day ago",
            "format": "double",
            "type": "number"
          },
          "price7d": {
            "description": "Price in USD of the token 7 days ago",
            "format": "double",
            "type": "number"
          },
          "subcategory": {
            "description": "Subcategory of the token",
            "nullable": true,
            "type": "string"
          },
          "symbol": {
            "description": "Token mint symbol",
            "type": "string"
          },
          "tokenAmountVolume24h": {
            "description": "Token volume transferred in past 24 hours",
            "format": "double",
            "nullable": true,
            "type": "number"
          },
          "updateTime": {
            "description": "Time of last update of price",
            "format": "int64",
            "type": "integer"
          },
          "usdValueVolume24h": {
            "description": "Token volume transferred in past 24 hours USD value",
            "format": "double",
            "nullable": true,
            "type": "number"
          },
          "verified": {
            "description": "Verified status of the token",
            "type": "boolean"
          }
        },
        "required": [
          "symbol",
          "mintAddress",
          "price",
          "price1d",
          "price7d",
          "decimal",
          "verified",
          "updateTime",
          "currentSupply",
          "marketCap"
        ],
        "type": "object"
      },
      "TokenOhlcData": {
        "properties": {
          "close": {
            "description": "Close price",
            "type": "string"
          },
          "count": {
            "description": "Number of trades",
            "format": "int64",
            "type": "integer"
          },
          "high": {
            "description": "High price",
            "type": "string"
          },
          "low": {
            "description": "Low price",
            "type": "string"
          },
          "open": {
            "description": "Open price",
            "type": "string"
          },
          "timeBucketStart": {
            "description": "OHLC time bucket start",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "timeBucketStart",
          "open",
          "high",
          "low",
          "close",
          "count"
        ],
        "type": "object"
      },
      "TokenPerformance": {
        "description": "Summary of a token's performance.",
        "properties": {
          "pnlUsd": {
            "description": "The profit or loss for the token in USD.",
            "format": "double",
            "type": "number"
          },
          "tokenAddress": {
            "description": "The address of token.",
            "type": "string"
          },
          "tokenLogoUrl": {
            "description": "The logo URL of token (if any).",
            "nullable": true,
            "type": "string"
          },
          "tokenName": {
            "description": "The name of token (if any).",
            "nullable": true,
            "type": "string"
          },
          "tokenSymbol": {
            "description": "The symbol of token.",
            "type": "string"
          }
        },
        "required": [
          "tokenSymbol",
          "tokenAddress",
          "pnlUsd"
        ],
        "type": "object"
      },
      "TokenTransfersReturn": {
        "properties": {
          "transfers": {
            "description": "Found transfer data",
            "items": {
              "properties": {
                "amount": {
                  "description": "The total number of tokens involved in the transaction.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "blockTime": {
                  "description": "The timestamp when the transaction was confirmed on the blockchain, in Unix time.",
                  "format": "int64",
                  "type": "integer"
                },
                "calculatedAmount": {
                  "description": "The resulting amount after applying the `decimal` to the `amount` value.",
                  "type": "string"
                },
                "callingMetadata": {
                  "description": "The public key of the Solana program that initiated the transaction.",
                  "items": {
                    "properties": {
                      "callingInstructions": {
                        "format": "binary",
                        "type": "string"
                      },
                      "callingProgram": {
                        "type": "string"
                      },
                      "ixName": {
                        "type": "string"
                      },
                      "programName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "callingInstructions",
                      "ixName",
                      "callingProgram",
                      "programName"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "decimal": {
                  "description": "The number of decimal places used for the token's smallest unit.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "feePayer": {
                  "description": "The public key of the account responsible for paying the transaction fees.",
                  "type": "string"
                },
                "mintAddress": {
                  "description": "The public key of the token's mint, specifying the token type involved in the transaction.",
                  "type": "string"
                },
                "price": {
                  "description": "Price of the token involved in the transaction (e.g. `mint_address`) expressed in USD.",
                  "type": "string"
                },
                "receiverAddress": {
                  "description": "The public key of the account receiving the tokens.",
                  "nullable": true,
                  "type": "string"
                },
                "receiverTokenAccount": {
                  "description": "The public key of the specific token account of the receiver.",
                  "nullable": true,
                  "type": "string"
                },
                "senderAddress": {
                  "description": "The public key of the account sending the tokens.",
                  "type": "string"
                },
                "senderTokenAccount": {
                  "description": "The public key of the specific token account of the sender.",
                  "nullable": true,
                  "type": "string"
                },
                "signature": {
                  "description": "The cryptographic signature that uniquely identifies the transaction on the blockchain.",
                  "type": "string"
                },
                "slot": {
                  "description": "The slot number in which the transaction was processed on the Solana blockchain, helping to pinpoint the exact sequence of events.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "valueUsd": {
                  "description": "Calculated total USD value of the transfer based on the `amount`, `decimal`, and `price` values.",
                  "type": "string"
                }
              },
              "required": [
                "signature",
                "callingMetadata",
                "senderAddress",
                "mintAddress",
                "feePayer",
                "decimal",
                "amount",
                "slot",
                "blockTime",
                "price",
                "calculatedAmount",
                "valueUsd"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "transfers"
        ],
        "type": "object"
      },
      "TokenVolumeTimeSeriesData": {
        "properties": {
          "amount": {
            "description": "Amount transferred of the token.",
            "type": "string"
          },
          "timeBucketStart": {
            "description": "Time interval start time.",
            "format": "int32",
            "type": "integer"
          },
          "volume": {
            "description": "Volume transferred of the token in USD.",
            "type": "string"
          }
        },
        "required": [
          "timeBucketStart",
          "volume",
          "amount"
        ],
        "type": "object"
      },
      "TokenVolumeTimeSeriesInterval": {
        "description": "Enumerates the supported time intervals for token holders.",
        "enum": [
          "hour",
          "day"
        ],
        "type": "string"
      },
      "TokenVolumeTimeSeriesReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount transferred of the token.",
                  "type": "string"
                },
                "timeBucketStart": {
                  "description": "Time interval start time.",
                  "format": "int32",
                  "type": "integer"
                },
                "volume": {
                  "description": "Volume transferred of the token in USD.",
                  "type": "string"
                }
              },
              "required": [
                "timeBucketStart",
                "volume",
                "amount"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TokensReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "category": {
                  "description": "Category of the token",
                  "nullable": true,
                  "type": "string"
                },
                "currentSupply": {
                  "description": "Current token supply",
                  "format": "double",
                  "type": "number"
                },
                "decimal": {
                  "description": "Decimal places",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "logoUrl": {
                  "description": "Logo associated with the token",
                  "nullable": true,
                  "type": "string"
                },
                "marketCap": {
                  "description": "Current token market cap",
                  "format": "double",
                  "type": "number"
                },
                "mintAddress": {
                  "description": "The public key of the token of interest",
                  "type": "string"
                },
                "name": {
                  "description": "Token mint name",
                  "nullable": true,
                  "type": "string"
                },
                "price": {
                  "description": "Current price in USD",
                  "format": "double",
                  "type": "number"
                },
                "price1d": {
                  "description": "Price in USD of the token 1 day ago",
                  "format": "double",
                  "type": "number"
                },
                "price7d": {
                  "description": "Price in USD of the token 7 days ago",
                  "format": "double",
                  "type": "number"
                },
                "subcategory": {
                  "description": "Subcategory of the token",
                  "nullable": true,
                  "type": "string"
                },
                "symbol": {
                  "description": "Token mint symbol",
                  "type": "string"
                },
                "tokenAmountVolume24h": {
                  "description": "Token volume transferred in past 24 hours",
                  "format": "double",
                  "nullable": true,
                  "type": "number"
                },
                "updateTime": {
                  "description": "Time of last update of price",
                  "format": "int64",
                  "type": "integer"
                },
                "usdValueVolume24h": {
                  "description": "Token volume transferred in past 24 hours USD value",
                  "format": "double",
                  "nullable": true,
                  "type": "number"
                },
                "verified": {
                  "description": "Verified status of the token",
                  "type": "boolean"
                }
              },
              "required": [
                "symbol",
                "mintAddress",
                "price",
                "price1d",
                "price7d",
                "decimal",
                "verified",
                "updateTime",
                "currentSupply",
                "marketCap"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TopHolders": {
        "properties": {
          "balance": {
            "description": "Current Token Amount",
            "type": "string"
          },
          "ownerAddress": {
            "description": "Holder address",
            "type": "string"
          },
          "ownerLogoUrl": {
            "description": "Holder logo url",
            "nullable": true,
            "type": "string"
          },
          "ownerName": {
            "description": "Holder name",
            "nullable": true,
            "type": "string"
          },
          "percentageOfSupplyHeld": {
            "description": "Percentage of supply held",
            "format": "double",
            "type": "number"
          },
          "rank": {
            "description": "Rank",
            "format": "int64",
            "type": "integer"
          },
          "tokenLogoUrl": {
            "description": "Logo Url of the token of interest",
            "nullable": true,
            "type": "string"
          },
          "tokenMint": {
            "description": "The public key of the token of interest",
            "type": "string"
          },
          "tokenSymbol": {
            "description": "Symbol of the token of interest",
            "nullable": true,
            "type": "string"
          },
          "valueUsd": {
            "description": "Value Usd",
            "type": "string"
          }
        },
        "required": [
          "rank",
          "ownerAddress",
          "tokenMint",
          "balance",
          "valueUsd",
          "percentageOfSupplyHeld"
        ],
        "type": "object"
      },
      "TopHoldersReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "balance": {
                  "description": "Current Token Amount",
                  "type": "string"
                },
                "ownerAddress": {
                  "description": "Holder address",
                  "type": "string"
                },
                "ownerLogoUrl": {
                  "description": "Holder logo url",
                  "nullable": true,
                  "type": "string"
                },
                "ownerName": {
                  "description": "Holder name",
                  "nullable": true,
                  "type": "string"
                },
                "percentageOfSupplyHeld": {
                  "description": "Percentage of supply held",
                  "format": "double",
                  "type": "number"
                },
                "rank": {
                  "description": "Rank",
                  "format": "int64",
                  "type": "integer"
                },
                "tokenLogoUrl": {
                  "description": "Logo Url of the token of interest",
                  "nullable": true,
                  "type": "string"
                },
                "tokenMint": {
                  "description": "The public key of the token of interest",
                  "type": "string"
                },
                "tokenSymbol": {
                  "description": "Symbol of the token of interest",
                  "nullable": true,
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value Usd",
                  "type": "string"
                }
              },
              "required": [
                "rank",
                "ownerAddress",
                "tokenMint",
                "balance",
                "valueUsd",
                "percentageOfSupplyHeld"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TradeDataProgramReturn": {
        "properties": {
          "authorityAddress": {
            "description": "The public key of the signer who authorized the trade.",
            "type": "string"
          },
          "baseMintAddress": {
            "description": "The mint address of the base token involved in the trade.",
            "type": "string"
          },
          "baseSize": {
            "description": "The quantity of the base token involved in the trade.",
            "type": "string"
          },
          "blockTime": {
            "description": "The Unix timestamp at which the trade occurred on the blockchain.",
            "format": "int64",
            "type": "integer"
          },
          "fee": {
            "description": "The amount of fees paid for the trade.",
            "type": "string"
          },
          "feePayer": {
            "description": "The public key of the account responsible for paying the transaction fees.",
            "type": "string"
          },
          "iixOrdinal": {
            "description": "The location of the trade inner ix inside the transaction. 255 is returned if not applicable.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "interIxOrdinal": {
            "description": "The location of the trade inside an ix (in 2 hop swaps). 255 is returned if not applicable.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "ixOrdinal": {
            "description": "The location of the trade ix inside the transaction.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "marketId": {
            "description": "The identifier for the market pair, e.g., SOL/USDC, where the trade took place.",
            "type": "string"
          },
          "price": {
            "description": "The price of one unit of the base token, expressed in terms of the quote token.",
            "type": "string"
          },
          "programId": {
            "description": "The public key of the AMM or DEX program that facilitated the trade.",
            "type": "string"
          },
          "quoteMintAddress": {
            "description": "The mint address of the quote token used in the trade.",
            "type": "string"
          },
          "quoteSize": {
            "description": "The amount of the quote token exchanged in the trade.",
            "type": "string"
          },
          "signature": {
            "description": "The unique identifier of the transaction signature on the blockchain.",
            "type": "string"
          },
          "slot": {
            "description": "Slot of the trade",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "txIndex": {
            "description": "The transaction index of the trade.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "authorityAddress",
          "blockTime",
          "iixOrdinal",
          "baseMintAddress",
          "interIxOrdinal",
          "ixOrdinal",
          "marketId",
          "quoteMintAddress",
          "price",
          "programId",
          "signature",
          "slot",
          "txIndex",
          "fee",
          "feePayer",
          "baseSize",
          "quoteSize"
        ],
        "type": "object"
      },
      "TradeDataProgramVecReturn": {
        "properties": {
          "data": {
            "description": "Found trade data",
            "items": {
              "properties": {
                "authorityAddress": {
                  "description": "The public key of the signer who authorized the trade.",
                  "type": "string"
                },
                "baseMintAddress": {
                  "description": "The mint address of the base token involved in the trade.",
                  "type": "string"
                },
                "baseSize": {
                  "description": "The quantity of the base token involved in the trade.",
                  "type": "string"
                },
                "blockTime": {
                  "description": "The Unix timestamp at which the trade occurred on the blockchain.",
                  "format": "int64",
                  "type": "integer"
                },
                "fee": {
                  "description": "The amount of fees paid for the trade.",
                  "type": "string"
                },
                "feePayer": {
                  "description": "The public key of the account responsible for paying the transaction fees.",
                  "type": "string"
                },
                "iixOrdinal": {
                  "description": "The location of the trade inner ix inside the transaction. 255 is returned if not applicable.",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "interIxOrdinal": {
                  "description": "The location of the trade inside an ix (in 2 hop swaps). 255 is returned if not applicable.",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "ixOrdinal": {
                  "description": "The location of the trade ix inside the transaction.",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "marketId": {
                  "description": "The identifier for the market pair, e.g., SOL/USDC, where the trade took place.",
                  "type": "string"
                },
                "price": {
                  "description": "The price of one unit of the base token, expressed in terms of the quote token.",
                  "type": "string"
                },
                "programId": {
                  "description": "The public key of the AMM or DEX program that facilitated the trade.",
                  "type": "string"
                },
                "quoteMintAddress": {
                  "description": "The mint address of the quote token used in the trade.",
                  "type": "string"
                },
                "quoteSize": {
                  "description": "The amount of the quote token exchanged in the trade.",
                  "type": "string"
                },
                "signature": {
                  "description": "The unique identifier of the transaction signature on the blockchain.",
                  "type": "string"
                },
                "slot": {
                  "description": "Slot of the trade",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "txIndex": {
                  "description": "The transaction index of the trade.",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "required": [
                "authorityAddress",
                "blockTime",
                "iixOrdinal",
                "baseMintAddress",
                "interIxOrdinal",
                "ixOrdinal",
                "marketId",
                "quoteMintAddress",
                "price",
                "programId",
                "signature",
                "slot",
                "txIndex",
                "fee",
                "feePayer",
                "baseSize",
                "quoteSize"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TradeOhlcvCandleReturn": {
        "properties": {
          "close": {
            "description": "Close price",
            "type": "string"
          },
          "count": {
            "description": "Number of trades",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "high": {
            "description": "High price",
            "type": "string"
          },
          "low": {
            "description": "Low price",
            "type": "string"
          },
          "open": {
            "description": "Open price",
            "type": "string"
          },
          "time": {
            "description": "OHLC time bucket start",
            "type": "string"
          },
          "volume": {
            "description": "Volume",
            "type": "string"
          },
          "volumeUsd": {
            "description": "Volume in USD",
            "type": "string"
          }
        },
        "required": [
          "time",
          "open",
          "high",
          "low",
          "close",
          "volume",
          "volumeUsd",
          "count"
        ],
        "type": "object"
      },
      "TradeOhlcvCandleReturnDeprecated": {
        "properties": {
          "close": {
            "description": "Close price",
            "type": "string"
          },
          "count": {
            "description": "Number of trades",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "high": {
            "description": "High price",
            "type": "string"
          },
          "low": {
            "description": "Low price",
            "type": "string"
          },
          "open": {
            "description": "Open price",
            "type": "string"
          },
          "time": {
            "description": "OHLC time bucket start",
            "type": "string"
          },
          "volume": {
            "description": "Volume",
            "type": "string"
          }
        },
        "required": [
          "time",
          "open",
          "high",
          "low",
          "close",
          "volume",
          "count"
        ],
        "type": "object"
      },
      "TradeOhlcvCandleVecReturn": {
        "properties": {
          "data": {
            "description": "Found OHLCV data",
            "items": {
              "properties": {
                "close": {
                  "description": "Close price",
                  "type": "string"
                },
                "count": {
                  "description": "Number of trades",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "high": {
                  "description": "High price",
                  "type": "string"
                },
                "low": {
                  "description": "Low price",
                  "type": "string"
                },
                "open": {
                  "description": "Open price",
                  "type": "string"
                },
                "time": {
                  "description": "OHLC time bucket start",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume",
                  "type": "string"
                },
                "volumeUsd": {
                  "description": "Volume in USD",
                  "type": "string"
                }
              },
              "required": [
                "time",
                "open",
                "high",
                "low",
                "close",
                "volume",
                "volumeUsd",
                "count"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TradeOhlcvCandleVecReturnDeprecated": {
        "properties": {
          "data": {
            "description": "Found OHLCV data",
            "items": {
              "properties": {
                "close": {
                  "description": "Close price",
                  "type": "string"
                },
                "count": {
                  "description": "Number of trades",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "high": {
                  "description": "High price",
                  "type": "string"
                },
                "low": {
                  "description": "Low price",
                  "type": "string"
                },
                "open": {
                  "description": "Open price",
                  "type": "string"
                },
                "time": {
                  "description": "OHLC time bucket start",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume",
                  "type": "string"
                }
              },
              "required": [
                "time",
                "open",
                "high",
                "low",
                "close",
                "volume",
                "count"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TradePriceMarketReturn": {
        "properties": {
          "baseTokenMint": {
            "format": "pubkey",
            "type": "string"
          },
          "baseTokenName": {
            "description": "Name of the base token",
            "nullable": true,
            "type": "string"
          },
          "baseTokenSymbol": {
            "description": "Ticker for the base token",
            "nullable": true,
            "type": "string"
          },
          "marketId": {
            "format": "pubkey",
            "type": "string"
          },
          "marketName": {
            "description": "Name of the market",
            "nullable": true,
            "type": "string"
          },
          "programId": {
            "format": "pubkey",
            "type": "string"
          },
          "programName": {
            "description": "Name of the program",
            "nullable": true,
            "type": "string"
          },
          "quoteTokenMint": {
            "format": "pubkey",
            "type": "string"
          },
          "quoteTokenName": {
            "description": "Name of the quote token",
            "nullable": true,
            "type": "string"
          },
          "quoteTokenSymbol": {
            "description": "Ticker for the quote token",
            "nullable": true,
            "type": "string"
          },
          "updatedAt": {
            "description": "Latest update Time",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "marketId",
          "programId",
          "baseTokenMint",
          "quoteTokenMint",
          "updatedAt"
        ],
        "type": "object"
      },
      "TradePriceProgramsReturn": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "programId": {
                  "format": "pubkey",
                  "type": "string"
                },
                "programName": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "programId"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TradePriceUpdateFilter": {
        "properties": {
          "baseMintAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "quoteMintAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "TradeSideSummary": {
        "description": "Summary metrics for a trade side (buy or sell).",
        "properties": {
          "tokenAmount": {
            "description": "The total volume of tokens traded on this side.",
            "format": "double",
            "type": "number"
          },
          "transactionCount": {
            "description": "The number of trades executed on this side.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "volumeUsd": {
            "description": "The total traded volume expressed in USD on this side.",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "volumeUsd",
          "tokenAmount",
          "transactionCount"
        ],
        "type": "object"
      },
      "TradesFilter": {
        "properties": {
          "authorityAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "baseMintAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "feePayer": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "marketId": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "programId": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "quoteMintAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "tokenMintAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "TradesPricesProgram": {
        "properties": {
          "programId": {
            "format": "pubkey",
            "type": "string"
          },
          "programName": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "programId"
        ],
        "type": "object"
      },
      "TransferReturn": {
        "properties": {
          "amount": {
            "description": "The total number of tokens involved in the transaction.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "blockTime": {
            "description": "The timestamp when the transaction was confirmed on the blockchain, in Unix time.",
            "format": "int64",
            "type": "integer"
          },
          "calculatedAmount": {
            "description": "The resulting amount after applying the `decimal` to the `amount` value.",
            "type": "string"
          },
          "callingMetadata": {
            "description": "The public key of the Solana program that initiated the transaction.",
            "items": {
              "properties": {
                "callingInstructions": {
                  "format": "binary",
                  "type": "string"
                },
                "callingProgram": {
                  "type": "string"
                },
                "ixName": {
                  "type": "string"
                },
                "programName": {
                  "type": "string"
                }
              },
              "required": [
                "callingInstructions",
                "ixName",
                "callingProgram",
                "programName"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "decimal": {
            "description": "The number of decimal places used for the token's smallest unit.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "feePayer": {
            "description": "The public key of the account responsible for paying the transaction fees.",
            "type": "string"
          },
          "mintAddress": {
            "description": "The public key of the token's mint, specifying the token type involved in the transaction.",
            "type": "string"
          },
          "price": {
            "description": "Price of the token involved in the transaction (e.g. `mint_address`) expressed in USD.",
            "type": "string"
          },
          "receiverAddress": {
            "description": "The public key of the account receiving the tokens.",
            "nullable": true,
            "type": "string"
          },
          "receiverTokenAccount": {
            "description": "The public key of the specific token account of the receiver.",
            "nullable": true,
            "type": "string"
          },
          "senderAddress": {
            "description": "The public key of the account sending the tokens.",
            "type": "string"
          },
          "senderTokenAccount": {
            "description": "The public key of the specific token account of the sender.",
            "nullable": true,
            "type": "string"
          },
          "signature": {
            "description": "The cryptographic signature that uniquely identifies the transaction on the blockchain.",
            "type": "string"
          },
          "slot": {
            "description": "The slot number in which the transaction was processed on the Solana blockchain, helping to pinpoint the exact sequence of events.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "valueUsd": {
            "description": "Calculated total USD value of the transfer based on the `amount`, `decimal`, and `price` values.",
            "type": "string"
          }
        },
        "required": [
          "signature",
          "callingMetadata",
          "senderAddress",
          "mintAddress",
          "feePayer",
          "decimal",
          "amount",
          "slot",
          "blockTime",
          "price",
          "calculatedAmount",
          "valueUsd"
        ],
        "type": "object"
      },
      "TransferReturnWs": {
        "properties": {
          "amount": {
            "description": "The total number of tokens involved in the transaction.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "blockTime": {
            "description": "The timestamp when the transaction was confirmed on the blockchain, in Unix time.",
            "format": "int64",
            "type": "integer"
          },
          "callingPrograms": {
            "description": "An array of all the programs that were utilized during the transaction If a specific program is used as a filter in the query, it may appear in the CallingPrograms array alongside other programs that were also part of the transaction.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "decimal": {
            "description": "The number of decimal places used for the token's smallest unit.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "feePayer": {
            "description": "The public key of the account responsible for paying the transaction fees.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the transaction.",
            "format": "binary",
            "type": "string"
          },
          "mintAddress": {
            "description": "The public key of the token's mint, specifying the token type involved in the transaction.",
            "type": "string"
          },
          "receiverAddress": {
            "description": "The public key of the account receiving the tokens.",
            "nullable": true,
            "type": "string"
          },
          "receiverTokenAccount": {
            "description": "The public key of the specific token account of the receiver.",
            "nullable": true,
            "type": "string"
          },
          "senderAddress": {
            "description": "The public key of the account sending the tokens.",
            "type": "string"
          },
          "senderTokenAccount": {
            "description": "The public key of the specific token account of the sender.",
            "nullable": true,
            "type": "string"
          },
          "signature": {
            "description": "The cryptographic signature that uniquely identifies the transaction on the blockchain.",
            "type": "string"
          },
          "slot": {
            "description": "The slot number in which the transaction was processed on the Solana blockchain, helping to pinpoint the exact sequence of events.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "signature",
          "callingPrograms",
          "senderAddress",
          "mintAddress",
          "feePayer",
          "decimal",
          "amount",
          "slot",
          "blockTime",
          "id"
        ],
        "type": "object"
      },
      "TransfersFilter": {
        "properties": {
          "feePayer": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "maxAmount": {
            "description": "Inclusive maximum of transfered amount\nCan be combined with [Self::min_amount]",
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "minAmount": {
            "description": "Inclusive minimum of transfered amount\nCan be combined with [Self::max_amount]",
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "programId": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "receiverAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "receiverTokenAccount": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "senderAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "senderTokenAccount": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          },
          "tokenMintAddress": {
            "allOf": [
              {
                "format": "pubkey",
                "type": "string"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "WalletBalanceNftResults": {
        "properties": {
          "data": {
            "description": "NFTs in the wallet (up to limit)",
            "items": {
              "properties": {
                "collectionAddress": {
                  "description": "Public key of the NFT collection",
                  "type": "string"
                },
                "logoUrl": {
                  "description": "Logo URL for the NFT",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Symbol for the NFT",
                  "nullable": true,
                  "type": "string"
                },
                "priceSol": {
                  "description": "Price of the NFT in SOL",
                  "type": "string"
                },
                "priceUsd": {
                  "description": "Price of the NFT in USD",
                  "type": "string"
                },
                "slot": {
                  "description": "Slot for the most recent update to the NFT balance",
                  "format": "int64",
                  "type": "integer"
                },
                "totalItems": {
                  "description": "Amount of the NFT",
                  "format": "int32",
                  "type": "integer"
                },
                "valueSol": {
                  "description": "Value of the held NFT in SOL",
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value of the held NFT in USD",
                  "type": "string"
                }
              },
              "required": [
                "collectionAddress",
                "totalItems",
                "valueSol",
                "priceSol",
                "valueUsd",
                "priceUsd",
                "slot"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "description": "Datetime of the report as a Unix timestamp",
            "minimum": 0,
            "type": "integer"
          },
          "ownerAddress": {
            "format": "pubkey",
            "type": "string"
          },
          "totalNftCollectionCount": {
            "description": "Total number of nfts in the wallet",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "totalSol": {
            "description": "Value of the wallet in SOL",
            "type": "string"
          },
          "totalUsd": {
            "description": "Value of the wallet in USD",
            "type": "string"
          }
        },
        "required": [
          "date",
          "ownerAddress",
          "totalSol",
          "totalUsd",
          "totalNftCollectionCount",
          "data"
        ],
        "type": "object"
      },
      "WalletBalanceNftResultsMany": {
        "properties": {
          "data": {
            "description": "NFTs in the wallet (up to limit)",
            "items": {
              "properties": {
                "collectionAddress": {
                  "description": "Public key of the NFT collection",
                  "type": "string"
                },
                "logoUrl": {
                  "description": "Logo URL for the NFT",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "Symbol for the NFT",
                  "nullable": true,
                  "type": "string"
                },
                "priceSol": {
                  "description": "Price of the NFT in SOL",
                  "type": "string"
                },
                "priceUsd": {
                  "description": "Price of the NFT in USD",
                  "type": "string"
                },
                "slot": {
                  "description": "Slot for the most recent update to the NFT balance",
                  "format": "int64",
                  "type": "integer"
                },
                "totalItems": {
                  "description": "Amount of the NFT",
                  "format": "int32",
                  "type": "integer"
                },
                "valueSol": {
                  "description": "Value of the held NFT in SOL",
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value of the held NFT in USD",
                  "type": "string"
                }
              },
              "required": [
                "collectionAddress",
                "totalItems",
                "valueSol",
                "priceSol",
                "valueUsd",
                "priceUsd",
                "slot"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "description": "Datetime of the report as a Unix timestamp",
            "minimum": 0,
            "type": "integer"
          },
          "ownerAddresses": {
            "description": "Owners of the wallets",
            "items": {
              "format": "pubkey",
              "type": "string"
            },
            "type": "array"
          },
          "totalNftCollectionCount": {
            "description": "Total number of nft collections in the wallet",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "totalSol": {
            "description": "Value of the wallet in SOL",
            "type": "string"
          },
          "totalUsd": {
            "description": "Value of the wallet in USD",
            "type": "string"
          }
        },
        "required": [
          "date",
          "ownerAddresses",
          "totalSol",
          "totalUsd",
          "totalNftCollectionCount",
          "data"
        ],
        "type": "object"
      },
      "WalletBalanceTokenResults": {
        "properties": {
          "activeStakedSolBalance": {
            "description": "Value of active staked SOL",
            "type": "string"
          },
          "activeStakedSolBalanceUsd": {
            "description": "Value of active staked SOL in USD",
            "type": "string"
          },
          "data": {
            "description": "Tokens in the wallet (up to limit)",
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount of the token",
                  "type": "string"
                },
                "category": {
                  "description": "Category for the token",
                  "nullable": true,
                  "type": "string"
                },
                "decimals": {
                  "description": "Decimals for the token",
                  "format": "int64",
                  "type": "integer"
                },
                "logoUrl": {
                  "description": "Logo URL for the token",
                  "nullable": true,
                  "type": "string"
                },
                "mintAddress": {
                  "description": "Address for the token",
                  "type": "string"
                },
                "name": {
                  "description": "Name for the token, can be null for unknown addresses",
                  "nullable": true,
                  "type": "string"
                },
                "priceUsd": {
                  "description": "Average price of the token in USD",
                  "type": "string"
                },
                "priceUsd1dChange": {
                  "description": "Change in the price of the token in USD over the last 24 hours",
                  "type": "string"
                },
                "priceUsd7dTrend": {
                  "description": "7 day trend of the token price in USD",
                  "type": "string"
                },
                "slot": {
                  "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
                  "format": "int64",
                  "type": "integer"
                },
                "symbol": {
                  "description": "Symbol for the token, can be null for unknown addresses",
                  "nullable": true,
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value of the held tokens in USD",
                  "type": "string"
                },
                "valueUsd1dChange": {
                  "description": "Change in the value of the held tokens in USD over the last 24 hours",
                  "type": "string"
                },
                "verified": {
                  "description": "Whether the token is verified or not.",
                  "type": "boolean"
                }
              },
              "required": [
                "mintAddress",
                "amount",
                "priceUsd",
                "priceUsd1dChange",
                "priceUsd7dTrend",
                "valueUsd",
                "valueUsd1dChange",
                "decimals",
                "verified",
                "slot"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "description": "Datetime of the report as a Unix timestamp",
            "minimum": 0,
            "type": "integer"
          },
          "ownerAddress": {
            "format": "pubkey",
            "type": "string"
          },
          "stakedSolBalance": {
            "description": "Value of the staked SOL",
            "type": "string"
          },
          "stakedSolBalanceUsd": {
            "description": "Value of the staked SOL in USD",
            "type": "string"
          },
          "totalTokenCount": {
            "description": "Total number of tokens in the wallet",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "totalTokenValueUsd": {
            "description": "Value of the wallet in USD, including SOL",
            "type": "string"
          },
          "totalTokenValueUsd1dChange": {
            "description": "Change in the value of the wallet in USD over the last 24 hours",
            "type": "string"
          }
        },
        "required": [
          "date",
          "ownerAddress",
          "stakedSolBalanceUsd",
          "stakedSolBalance",
          "activeStakedSolBalanceUsd",
          "activeStakedSolBalance",
          "totalTokenValueUsd",
          "totalTokenValueUsd1dChange",
          "totalTokenCount",
          "data"
        ],
        "type": "object"
      },
      "WalletBalanceTokenResultsMany": {
        "properties": {
          "activeStakedSolBalance": {
            "description": "Value of active staked SOL",
            "type": "string"
          },
          "activeStakedSolBalanceUsd": {
            "description": "Value of active staked SOL in USD",
            "type": "string"
          },
          "data": {
            "description": "Tokens in the wallet (up to limit)",
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount of the token",
                  "type": "string"
                },
                "category": {
                  "description": "Category for the token",
                  "nullable": true,
                  "type": "string"
                },
                "decimals": {
                  "description": "Decimals for the token",
                  "format": "int64",
                  "type": "integer"
                },
                "logoUrl": {
                  "description": "Logo URL for the token",
                  "nullable": true,
                  "type": "string"
                },
                "mintAddress": {
                  "description": "Address for the token",
                  "type": "string"
                },
                "name": {
                  "description": "Name for the token, can be null for unknown addresses",
                  "nullable": true,
                  "type": "string"
                },
                "priceUsd": {
                  "description": "Average price of the token in USD",
                  "type": "string"
                },
                "priceUsd1dChange": {
                  "description": "Change in the price of the token in USD over the last 24 hours",
                  "type": "string"
                },
                "priceUsd7dTrend": {
                  "description": "7 day trend of the token price in USD",
                  "type": "string"
                },
                "slot": {
                  "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
                  "format": "int64",
                  "type": "integer"
                },
                "symbol": {
                  "description": "Symbol for the token, can be null for unknown addresses",
                  "nullable": true,
                  "type": "string"
                },
                "valueUsd": {
                  "description": "Value of the held tokens in USD",
                  "type": "string"
                },
                "valueUsd1dChange": {
                  "description": "Change in the value of the held tokens in USD over the last 24 hours",
                  "type": "string"
                },
                "verified": {
                  "description": "Whether the token is verified or not.",
                  "type": "boolean"
                }
              },
              "required": [
                "mintAddress",
                "amount",
                "priceUsd",
                "priceUsd1dChange",
                "priceUsd7dTrend",
                "valueUsd",
                "valueUsd1dChange",
                "decimals",
                "verified",
                "slot"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "description": "Datetime of the report as a Unix timestamp",
            "minimum": 0,
            "type": "integer"
          },
          "ownerAddresses": {
            "description": "Owners of the wallets",
            "items": {
              "format": "pubkey",
              "type": "string"
            },
            "type": "array"
          },
          "stakedSolBalance": {
            "description": "Value of the staked SOL",
            "type": "string"
          },
          "stakedSolBalanceUsd": {
            "description": "Value of the staked SOL in USD",
            "type": "string"
          },
          "totalTokenCount": {
            "description": "Total number of tokens in the wallet",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "totalTokenValueUsd": {
            "description": "Value of the wallet in USD, including SOL",
            "type": "string"
          },
          "totalTokenValueUsd1dChange": {
            "description": "Change in the value of the tokens in the wallet in USD over the last 24 hours",
            "type": "string"
          }
        },
        "required": [
          "date",
          "ownerAddresses",
          "stakedSolBalanceUsd",
          "stakedSolBalance",
          "activeStakedSolBalanceUsd",
          "activeStakedSolBalance",
          "totalTokenValueUsd",
          "totalTokenValueUsd1dChange",
          "totalTokenCount",
          "data"
        ],
        "type": "object"
      },
      "WalletBalanceTokenResultsTimeSeries": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "blockTime": {
                  "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "stakeValue": {
                  "description": "The value of staked SOL in USD",
                  "type": "string"
                },
                "stakeValueSol": {
                  "description": "The value of staked SOL in SOL",
                  "type": "string"
                },
                "systemValue": {
                  "description": "The value of held System SOL in USD",
                  "type": "string"
                },
                "tokenValue": {
                  "description": "Combined value of valid SPL tokens in USD.",
                  "type": "string"
                }
              },
              "required": [
                "blockTime",
                "tokenValue",
                "stakeValue",
                "systemValue",
                "stakeValueSol"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "ownerAddress": {
            "format": "pubkey",
            "type": "string"
          }
        },
        "required": [
          "ownerAddress",
          "data"
        ],
        "type": "object"
      },
      "WalletBalanceTokenResultsTimeSeriesElement": {
        "properties": {
          "blockTime": {
            "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "stakeValue": {
            "description": "The value of staked SOL in USD",
            "type": "string"
          },
          "stakeValueSol": {
            "description": "The value of staked SOL in SOL",
            "type": "string"
          },
          "systemValue": {
            "description": "The value of held System SOL in USD",
            "type": "string"
          },
          "tokenValue": {
            "description": "Combined value of valid SPL tokens in USD.",
            "type": "string"
          }
        },
        "required": [
          "blockTime",
          "tokenValue",
          "stakeValue",
          "systemValue",
          "stakeValueSol"
        ],
        "type": "object"
      },
      "WalletBalanceTokenResultsTimeSeriesMany": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "blockTime": {
                  "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "stakeValue": {
                  "description": "The value of staked SOL in USD",
                  "type": "string"
                },
                "stakeValueSol": {
                  "description": "The value of staked SOL in SOL",
                  "type": "string"
                },
                "systemValue": {
                  "description": "The value of held System SOL in USD",
                  "type": "string"
                },
                "tokenValue": {
                  "description": "Combined value of valid SPL tokens in USD.",
                  "type": "string"
                }
              },
              "required": [
                "blockTime",
                "tokenValue",
                "stakeValue",
                "systemValue",
                "stakeValueSol"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "ownerAddresses": {
            "items": {
              "format": "pubkey",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ownerAddresses",
          "data"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "description": "Authorization header with X-API-KEY formatting.",
        "in": "header",
        "name": "X-API-KEY",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "info@vybenetwork.com",
      "name": "Vybe Dev Team"
    },
    "description": "This API provides read access to data from the Solana blockchain.\n        The API is organized according to related data of interest.\n        Please consult individual endpoints' documentation for more.\n        The API is for authenticated users only.\n        To gain access, please contact us at support@vybenetwork.com to obtain an API key.",
    "license": {
      "name": "Terms of Service",
      "url": "https://alpha.vybenetwork.com/terms"
    },
    "title": "Vybe API",
    "version": "3.9.10"
  },
  "openapi": "3.0.3",
  "paths": {
    "/account/known-accounts": {
      "get": {
        "description": "Retrieve a categorized list of labeled Solana accounts, including CEX wallets, project treasuries, AMM liquidity pools, market makers, and influencers.",
        "operationId": "get_known_accounts",
        "parameters": [
          {
            "description": "The public key (pubKey) associated with the Solana account",
            "in": "query",
            "name": "ownerAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Friendly name of account",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Category of account. Only accounts matching all labels will be returned (eg. labels=DEFI,NFT)",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            }
          },
          {
            "description": "Name of the business or entity that controls this account",
            "in": "query",
            "name": "entityName",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Entity id to filter with (including as empty or null, such as \"entity_id=\" will filter programs without an entity_id)",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Sort list ascending. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort by descending. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accounts": {
                      "description": "Found accounts",
                      "items": {
                        "properties": {
                          "dateAdded": {
                            "description": "Date added to the database",
                            "format": "date-time",
                            "type": "string"
                          },
                          "entity": {
                            "description": "Account entity, if available",
                            "nullable": true,
                            "type": "string"
                          },
                          "entityId": {
                            "description": "Account entity ID, if available",
                            "format": "int32",
                            "nullable": true,
                            "type": "integer"
                          },
                          "labels": {
                            "description": "Account labels, eg: DEFI,NFT",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "logoUrl": {
                            "description": "Account logo URL, if available",
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Account name",
                            "nullable": true,
                            "type": "string"
                          },
                          "ownerAddress": {
                            "description": "The public key (pubKey) associated with the Solana account",
                            "type": "string"
                          },
                          "twitterUrl": {
                            "description": "Twiiter url for the account",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "ownerAddress",
                          "labels",
                          "dateAdded"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "accounts"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Tokens info collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data could be found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Known Accounts",
        "tags": [
          "account"
        ]
      }
    },
    "/account/nft-balance/{ownerAddress}": {
      "get": {
        "description": "Obtain the NFT balances for a provided account address. This endpoint consolidates NFT holdings and offers portfolio values in USD and SOL, facilitating a comprehensive view of the account's NFT assets.",
        "operationId": "get_wallet_nfts",
        "parameters": [
          {
            "description": "The public key (pubKey) associated with the Solana account.",
            "in": "path",
            "name": "ownerAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Whether or not we should include NFTs we do not track prices for.",
            "in": "query",
            "name": "includeNoPriceBalance",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The limit of entries to return. If not passed, first 1000 entries are returned (the maximum).",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "The requested page.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "NFTs in the wallet (up to limit)",
                      "items": {
                        "properties": {
                          "collectionAddress": {
                            "description": "Public key of the NFT collection",
                            "type": "string"
                          },
                          "logoUrl": {
                            "description": "Logo URL for the NFT",
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Symbol for the NFT",
                            "nullable": true,
                            "type": "string"
                          },
                          "priceSol": {
                            "description": "Price of the NFT in SOL",
                            "type": "string"
                          },
                          "priceUsd": {
                            "description": "Price of the NFT in USD",
                            "type": "string"
                          },
                          "slot": {
                            "description": "Slot for the most recent update to the NFT balance",
                            "format": "int64",
                            "type": "integer"
                          },
                          "totalItems": {
                            "description": "Amount of the NFT",
                            "format": "int32",
                            "type": "integer"
                          },
                          "valueSol": {
                            "description": "Value of the held NFT in SOL",
                            "type": "string"
                          },
                          "valueUsd": {
                            "description": "Value of the held NFT in USD",
                            "type": "string"
                          }
                        },
                        "required": [
                          "collectionAddress",
                          "totalItems",
                          "valueSol",
                          "priceSol",
                          "valueUsd",
                          "priceUsd",
                          "slot"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "date": {
                      "description": "Datetime of the report as a Unix timestamp",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "ownerAddress": {
                      "format": "pubkey",
                      "type": "string"
                    },
                    "totalNftCollectionCount": {
                      "description": "Total number of nfts in the wallet",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "totalSol": {
                      "description": "Value of the wallet in SOL",
                      "type": "string"
                    },
                    "totalUsd": {
                      "description": "Value of the wallet in USD",
                      "type": "string"
                    }
                  },
                  "required": [
                    "date",
                    "ownerAddress",
                    "totalSol",
                    "totalUsd",
                    "totalNftCollectionCount",
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "NFT Balances",
        "tags": [
          "account"
        ]
      }
    },
    "/account/nft-balances": {
      "post": {
        "description": "Obtain the NFT balances for a list of provided account addresses.\nThis endpoint consolidates NFT holdings and offers portfolio values in USD and SOL, facilitating a comprehensive view of the serveral account's NFT assets, aggregated together.",
        "operationId": "post_wallet_nfts_many",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "includeNoPriceBalance": {
                    "description": "Whether or not we should include NFTs we do not track prices for.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "The limit of entries to return (per wallet). If not passed, first 1000 entries are returned (the maximum).",
                    "format": "int32",
                    "minimum": 0,
                    "nullable": true,
                    "type": "integer"
                  },
                  "page": {
                    "description": "The requested page.",
                    "format": "int32",
                    "minimum": 0,
                    "nullable": true,
                    "type": "integer"
                  },
                  "sortByAsc": {
                    "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
                    "nullable": true,
                    "type": "string"
                  },
                  "sortByDesc": {
                    "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
                    "nullable": true,
                    "type": "string"
                  },
                  "wallets": {
                    "description": "Wallets to include in the returned results (max 10).",
                    "items": {
                      "format": "pubkey",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "wallets"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "NFTs in the wallet (up to limit)",
                      "items": {
                        "properties": {
                          "collectionAddress": {
                            "description": "Public key of the NFT collection",
                            "type": "string"
                          },
                          "logoUrl": {
                            "description": "Logo URL for the NFT",
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Symbol for the NFT",
                            "nullable": true,
                            "type": "string"
                          },
                          "priceSol": {
                            "description": "Price of the NFT in SOL",
                            "type": "string"
                          },
                          "priceUsd": {
                            "description": "Price of the NFT in USD",
                            "type": "string"
                          },
                          "slot": {
                            "description": "Slot for the most recent update to the NFT balance",
                            "format": "int64",
                            "type": "integer"
                          },
                          "totalItems": {
                            "description": "Amount of the NFT",
                            "format": "int32",
                            "type": "integer"
                          },
                          "valueSol": {
                            "description": "Value of the held NFT in SOL",
                            "type": "string"
                          },
                          "valueUsd": {
                            "description": "Value of the held NFT in USD",
                            "type": "string"
                          }
                        },
                        "required": [
                          "collectionAddress",
                          "totalItems",
                          "valueSol",
                          "priceSol",
                          "valueUsd",
                          "priceUsd",
                          "slot"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "date": {
                      "description": "Datetime of the report as a Unix timestamp",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "ownerAddresses": {
                      "description": "Owners of the wallets",
                      "items": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "totalNftCollectionCount": {
                      "description": "Total number of nft collections in the wallet",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "totalSol": {
                      "description": "Value of the wallet in SOL",
                      "type": "string"
                    },
                    "totalUsd": {
                      "description": "Value of the wallet in USD",
                      "type": "string"
                    }
                  },
                  "required": [
                    "date",
                    "ownerAddresses",
                    "totalSol",
                    "totalUsd",
                    "totalNftCollectionCount",
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "NFT Multi-wallet Balances",
        "tags": [
          "account"
        ]
      }
    },
    "/account/pnl/{ownerAddress}": {
      "get": {
        "description": "Comprehensive analysis of a wallet's trading performance and position details over specified time periods (1-day, 7-day, or 30-day).",
        "operationId": "get_wallet_pnl",
        "parameters": [
          {
            "description": "The public key (pubKey) associated with the Solana account.",
            "in": "path",
            "name": "ownerAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1d, 7d, 30d. Default is \"1d\".",
            "in": "query",
            "name": "resolution",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "description": "Represents the supported time-window resolutions for queries.",
                  "enum": [
                    "1d",
                    "7d",
                    "30d"
                  ],
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "The token address filter for tokens. Provides the token address to filter the requested data by.",
            "in": "query",
            "name": "tokenAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Sort ascending by 'tokenAddress', 'tokenSymbol', 'buysTransactionCount', 'buysTokenAmount', 'buysVolumeUsd', 'sellsTransactionCount', 'sellsTokenAmount', 'sellsVolumeUsd', 'realizedPnlUsd', 'unrealizedPnlUsd'. Only one of sort_by_asc or sort_by_desc can be used.",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort descending by 'tokenAddress', 'tokenSymbol', 'buysTransactionCount', 'buysTokenAmount', 'buysVolumeUsd', 'sellsTransactionCount', 'sellsTokenAmount', 'sellsVolumeUsd', 'realizedPnlUsd', 'unrealizedPnlUsd'. Only one of sort_by_asc or sort_by_desc can be used.",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The limit of entries to return. If not passed, first 1000 entries are returned (the maximum).",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "The requested page.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The overall summary and per-token metrics.",
                  "properties": {
                    "summary": {
                      "description": "Summary of overall trading performance.",
                      "properties": {
                        "averageTradeUsd": {
                          "description": "The average size of trades in USD.",
                          "format": "double",
                          "type": "number"
                        },
                        "bestPerformingToken": {
                          "allOf": [
                            {
                              "description": "Summary of a token's performance.",
                              "properties": {
                                "pnlUsd": {
                                  "description": "The profit or loss for the token in USD.",
                                  "format": "double",
                                  "type": "number"
                                },
                                "tokenAddress": {
                                  "description": "The address of token.",
                                  "type": "string"
                                },
                                "tokenLogoUrl": {
                                  "description": "The logo URL of token (if any).",
                                  "nullable": true,
                                  "type": "string"
                                },
                                "tokenName": {
                                  "description": "The name of token (if any).",
                                  "nullable": true,
                                  "type": "string"
                                },
                                "tokenSymbol": {
                                  "description": "The symbol of token.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "tokenSymbol",
                                "tokenAddress",
                                "pnlUsd"
                              ],
                              "type": "object"
                            }
                          ],
                          "nullable": true
                        },
                        "losingTradesCount": {
                          "description": "The number of trades that resulted in a loss.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "pnlTrendSevenDays": {
                          "description": "The profit and loss trend over the last seven days.",
                          "items": {
                            "items": {
                              "format": "double",
                              "type": "number"
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "realizedPnlUsd": {
                          "description": "The total realized profit in USD.",
                          "format": "double",
                          "type": "number"
                        },
                        "tradesCount": {
                          "description": "The total number of trades executed.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "tradesVolumeUsd": {
                          "description": "The total trading volume in USD.",
                          "format": "double",
                          "type": "number"
                        },
                        "uniqueTokensTraded": {
                          "description": "The count of unique tokens traded by the account.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "unrealizedPnlUsd": {
                          "description": "The total unrealized profit in USD.",
                          "format": "double",
                          "type": "number"
                        },
                        "winRate": {
                          "description": "The percentage of winning trades (0.0 to 100.0).",
                          "format": "double",
                          "type": "number"
                        },
                        "winningTradesCount": {
                          "description": "The number of trades that resulted in a profit.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "worstPerformingToken": {
                          "allOf": [
                            {
                              "description": "Summary of a token's performance.",
                              "properties": {
                                "pnlUsd": {
                                  "description": "The profit or loss for the token in USD.",
                                  "format": "double",
                                  "type": "number"
                                },
                                "tokenAddress": {
                                  "description": "The address of token.",
                                  "type": "string"
                                },
                                "tokenLogoUrl": {
                                  "description": "The logo URL of token (if any).",
                                  "nullable": true,
                                  "type": "string"
                                },
                                "tokenName": {
                                  "description": "The name of token (if any).",
                                  "nullable": true,
                                  "type": "string"
                                },
                                "tokenSymbol": {
                                  "description": "The symbol of token.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "tokenSymbol",
                                "tokenAddress",
                                "pnlUsd"
                              ],
                              "type": "object"
                            }
                          ],
                          "nullable": true
                        }
                      },
                      "required": [
                        "winRate",
                        "realizedPnlUsd",
                        "unrealizedPnlUsd",
                        "uniqueTokensTraded",
                        "averageTradeUsd",
                        "tradesCount",
                        "winningTradesCount",
                        "losingTradesCount",
                        "tradesVolumeUsd",
                        "pnlTrendSevenDays"
                      ],
                      "type": "object"
                    },
                    "tokenMetrics": {
                      "description": "Metrics for a token's trading performance.",
                      "items": {
                        "description": "Metrics for a token's trading performance.",
                        "properties": {
                          "buys": {
                            "description": "Summary metrics for a trade side (buy or sell).",
                            "properties": {
                              "tokenAmount": {
                                "description": "The total volume of tokens traded on this side.",
                                "format": "double",
                                "type": "number"
                              },
                              "transactionCount": {
                                "description": "The number of trades executed on this side.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "volumeUsd": {
                                "description": "The total traded volume expressed in USD on this side.",
                                "format": "double",
                                "type": "number"
                              }
                            },
                            "required": [
                              "volumeUsd",
                              "tokenAmount",
                              "transactionCount"
                            ],
                            "type": "object"
                          },
                          "realizedPnlUsd": {
                            "description": "The total realized profit in USD for this token.",
                            "format": "double",
                            "type": "number"
                          },
                          "sells": {
                            "description": "Summary metrics for a trade side (buy or sell).",
                            "properties": {
                              "tokenAmount": {
                                "description": "The total volume of tokens traded on this side.",
                                "format": "double",
                                "type": "number"
                              },
                              "transactionCount": {
                                "description": "The number of trades executed on this side.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "volumeUsd": {
                                "description": "The total traded volume expressed in USD on this side.",
                                "format": "double",
                                "type": "number"
                              }
                            },
                            "required": [
                              "volumeUsd",
                              "tokenAmount",
                              "transactionCount"
                            ],
                            "type": "object"
                          },
                          "tokenAddress": {
                            "description": "The address of the token.",
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "description": "The symbol of the token.",
                            "type": "string"
                          },
                          "unrealizedPnlUsd": {
                            "description": "The total unrealized profit in USD for this token.",
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "required": [
                          "tokenAddress",
                          "tokenSymbol",
                          "realizedPnlUsd",
                          "unrealizedPnlUsd",
                          "buys",
                          "sells"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "summary",
                    "tokenMetrics"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Portfolio metrics and detailed per-token statistics"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Wallet PnL",
        "tags": [
          "account"
        ]
      }
    },
    "/account/token-balance-ts/{ownerAddress}": {
      "get": {
        "description": "Retrieve daily SPL token balances for a given account address in a time-series format.\nThis endpoint aggregates native SOL, staked SOL, and SPL token holdings, and provides the value in both USD —offering a complete overview of the account’s token balances.\nThe tokens included reflect the default filters of the token-balances endpoint: a trade minimum of 100, a trade volume minimum of 100,000 USD, and a holder minimum of 50.",
        "operationId": "get_wallet_tokens_ts",
        "parameters": [
          {
            "description": "The public key (pubKey) associated with the Solana account.",
            "in": "path",
            "name": "ownerAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Number of previous days to include in the data (from today's date).\nAllowed values range from 1 to 30, default to 2 weeks (14 days)",
            "in": "query",
            "name": "days",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Whether Vybe's token filter should restrict the tokens that are returned. If false, all priced tokens are included. Default is true.",
            "in": "query",
            "name": "vybeTokenFilter",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "blockTime": {
                            "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "stakeValue": {
                            "description": "The value of staked SOL in USD",
                            "type": "string"
                          },
                          "stakeValueSol": {
                            "description": "The value of staked SOL in SOL",
                            "type": "string"
                          },
                          "systemValue": {
                            "description": "The value of held System SOL in USD",
                            "type": "string"
                          },
                          "tokenValue": {
                            "description": "Combined value of valid SPL tokens in USD.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "blockTime",
                          "tokenValue",
                          "stakeValue",
                          "systemValue",
                          "stakeValueSol"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ownerAddress": {
                      "format": "pubkey",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ownerAddress",
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Balances Time-series",
        "tags": [
          "account"
        ]
      }
    },
    "/account/token-balance/{ownerAddress}": {
      "get": {
        "description": "Get the SPL token balances for a provided account address.\nThis endpoint consolidates SPL token holdings and offers portfolio values in USD and SOL, facilitating a comprehensive view of the account's token balances.",
        "operationId": "get_wallet_tokens",
        "parameters": [
          {
            "description": "The public key (pubKey) associated with the Solana account.",
            "in": "path",
            "name": "ownerAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Whether or not we should include tokens we do not track prices for. Filtering is applied after limiting.",
            "in": "query",
            "name": "includeNoPriceBalance",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Whether tokens returned should be restricted to verified tokens only. Default is false.",
            "in": "query",
            "name": "onlyVerified",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Whether Vybe's token filter should restrict the tokens that are returned. Default is true.",
            "in": "query",
            "name": "vybeTokenFilter",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "The minimum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
            "in": "query",
            "name": "minAssetValue",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The maximum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
            "in": "query",
            "name": "maxAssetValue",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The limit of entries to return. If not passed, first 1000 entries are returned (the maximum).",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "The requested page.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "activeStakedSolBalance": {
                      "description": "Value of active staked SOL",
                      "type": "string"
                    },
                    "activeStakedSolBalanceUsd": {
                      "description": "Value of active staked SOL in USD",
                      "type": "string"
                    },
                    "data": {
                      "description": "Tokens in the wallet (up to limit)",
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount of the token",
                            "type": "string"
                          },
                          "category": {
                            "description": "Category for the token",
                            "nullable": true,
                            "type": "string"
                          },
                          "decimals": {
                            "description": "Decimals for the token",
                            "format": "int64",
                            "type": "integer"
                          },
                          "logoUrl": {
                            "description": "Logo URL for the token",
                            "nullable": true,
                            "type": "string"
                          },
                          "mintAddress": {
                            "description": "Address for the token",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name for the token, can be null for unknown addresses",
                            "nullable": true,
                            "type": "string"
                          },
                          "priceUsd": {
                            "description": "Average price of the token in USD",
                            "type": "string"
                          },
                          "priceUsd1dChange": {
                            "description": "Change in the price of the token in USD over the last 24 hours",
                            "type": "string"
                          },
                          "priceUsd7dTrend": {
                            "description": "7 day trend of the token price in USD",
                            "type": "string"
                          },
                          "slot": {
                            "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
                            "format": "int64",
                            "type": "integer"
                          },
                          "symbol": {
                            "description": "Symbol for the token, can be null for unknown addresses",
                            "nullable": true,
                            "type": "string"
                          },
                          "valueUsd": {
                            "description": "Value of the held tokens in USD",
                            "type": "string"
                          },
                          "valueUsd1dChange": {
                            "description": "Change in the value of the held tokens in USD over the last 24 hours",
                            "type": "string"
                          },
                          "verified": {
                            "description": "Whether the token is verified or not.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "mintAddress",
                          "amount",
                          "priceUsd",
                          "priceUsd1dChange",
                          "priceUsd7dTrend",
                          "valueUsd",
                          "valueUsd1dChange",
                          "decimals",
                          "verified",
                          "slot"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "date": {
                      "description": "Datetime of the report as a Unix timestamp",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "ownerAddress": {
                      "format": "pubkey",
                      "type": "string"
                    },
                    "stakedSolBalance": {
                      "description": "Value of the staked SOL",
                      "type": "string"
                    },
                    "stakedSolBalanceUsd": {
                      "description": "Value of the staked SOL in USD",
                      "type": "string"
                    },
                    "totalTokenCount": {
                      "description": "Total number of tokens in the wallet",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "totalTokenValueUsd": {
                      "description": "Value of the wallet in USD, including SOL",
                      "type": "string"
                    },
                    "totalTokenValueUsd1dChange": {
                      "description": "Change in the value of the wallet in USD over the last 24 hours",
                      "type": "string"
                    }
                  },
                  "required": [
                    "date",
                    "ownerAddress",
                    "stakedSolBalanceUsd",
                    "stakedSolBalance",
                    "activeStakedSolBalanceUsd",
                    "activeStakedSolBalance",
                    "totalTokenValueUsd",
                    "totalTokenValueUsd1dChange",
                    "totalTokenCount",
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Balances",
        "tags": [
          "account"
        ]
      }
    },
    "/account/token-balances": {
      "post": {
        "description": "Get the SPL token balances for a list of     account addresses at the current time.\nThis endpoint consolidates SPL token holdings and offers portfolio values in USD and SOL, facilitating a comprehensive view of serveral account's token balances, aggregated together.",
        "operationId": "post_wallet_tokens_many",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "includeNoPriceBalance": {
                    "description": "Whether or not we should include tokens we do not track prices for.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "The limit of entries to return (per wallet). If not passed, first 1000 entries are returned (the maximum).",
                    "format": "int32",
                    "minimum": 0,
                    "nullable": true,
                    "type": "integer"
                  },
                  "maxAssetValue": {
                    "description": "The maximum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
                    "nullable": true,
                    "type": "string"
                  },
                  "minAssetValue": {
                    "description": "The minimum amount of total value in USD for an asset to be considered in the results. Overrides `includeNoPriceBalance` Defaults to no limit.",
                    "nullable": true,
                    "type": "string"
                  },
                  "onlyVerified": {
                    "description": "Whether tokens returned should be restricted to verified tokens only. Default is false.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "page": {
                    "description": "The requested page.",
                    "format": "int32",
                    "minimum": 0,
                    "nullable": true,
                    "type": "integer"
                  },
                  "sortByAsc": {
                    "description": "Sort ascending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
                    "nullable": true,
                    "type": "string"
                  },
                  "sortByDesc": {
                    "description": "Sort descending based on amount or value of positions. Only one of sort_by_asc or sort_by_desc can be used",
                    "nullable": true,
                    "type": "string"
                  },
                  "vybeTokenFilter": {
                    "description": "Whether Vybe's token filter should restrict the tokens that are returned. Default is true.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "wallets": {
                    "description": "Wallets to include in the returned results (max 10).",
                    "items": {
                      "format": "pubkey",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "wallets"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "activeStakedSolBalance": {
                      "description": "Value of active staked SOL",
                      "type": "string"
                    },
                    "activeStakedSolBalanceUsd": {
                      "description": "Value of active staked SOL in USD",
                      "type": "string"
                    },
                    "data": {
                      "description": "Tokens in the wallet (up to limit)",
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount of the token",
                            "type": "string"
                          },
                          "category": {
                            "description": "Category for the token",
                            "nullable": true,
                            "type": "string"
                          },
                          "decimals": {
                            "description": "Decimals for the token",
                            "format": "int64",
                            "type": "integer"
                          },
                          "logoUrl": {
                            "description": "Logo URL for the token",
                            "nullable": true,
                            "type": "string"
                          },
                          "mintAddress": {
                            "description": "Address for the token",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name for the token, can be null for unknown addresses",
                            "nullable": true,
                            "type": "string"
                          },
                          "priceUsd": {
                            "description": "Average price of the token in USD",
                            "type": "string"
                          },
                          "priceUsd1dChange": {
                            "description": "Change in the price of the token in USD over the last 24 hours",
                            "type": "string"
                          },
                          "priceUsd7dTrend": {
                            "description": "7 day trend of the token price in USD",
                            "type": "string"
                          },
                          "slot": {
                            "description": "Slot for the most recent update to the token balance. May be 0 if no information is available",
                            "format": "int64",
                            "type": "integer"
                          },
                          "symbol": {
                            "description": "Symbol for the token, can be null for unknown addresses",
                            "nullable": true,
                            "type": "string"
                          },
                          "valueUsd": {
                            "description": "Value of the held tokens in USD",
                            "type": "string"
                          },
                          "valueUsd1dChange": {
                            "description": "Change in the value of the held tokens in USD over the last 24 hours",
                            "type": "string"
                          },
                          "verified": {
                            "description": "Whether the token is verified or not.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "mintAddress",
                          "amount",
                          "priceUsd",
                          "priceUsd1dChange",
                          "priceUsd7dTrend",
                          "valueUsd",
                          "valueUsd1dChange",
                          "decimals",
                          "verified",
                          "slot"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "date": {
                      "description": "Datetime of the report as a Unix timestamp",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "ownerAddresses": {
                      "description": "Owners of the wallets",
                      "items": {
                        "format": "pubkey",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "stakedSolBalance": {
                      "description": "Value of the staked SOL",
                      "type": "string"
                    },
                    "stakedSolBalanceUsd": {
                      "description": "Value of the staked SOL in USD",
                      "type": "string"
                    },
                    "totalTokenCount": {
                      "description": "Total number of tokens in the wallet",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "totalTokenValueUsd": {
                      "description": "Value of the wallet in USD, including SOL",
                      "type": "string"
                    },
                    "totalTokenValueUsd1dChange": {
                      "description": "Change in the value of the tokens in the wallet in USD over the last 24 hours",
                      "type": "string"
                    }
                  },
                  "required": [
                    "date",
                    "ownerAddresses",
                    "stakedSolBalanceUsd",
                    "stakedSolBalance",
                    "activeStakedSolBalanceUsd",
                    "activeStakedSolBalance",
                    "totalTokenValueUsd",
                    "totalTokenValueUsd1dChange",
                    "totalTokenCount",
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Multi-wallet Balances",
        "tags": [
          "account"
        ]
      }
    },
    "/account/token-balances-ts": {
      "post": {
        "description": "Retrieve daily SPL token balances for multiple account addresses in a time-series format.\nThis endpoint aggregates native SOL, staked SOL, and SPL token holdings, and presents a combined portfolio value in USD—offering a comprehensive overview of all specified accounts.\nThe tokens included reflect the default filters of the token-balances endpoint: a trade minimum of 100, a trade volume minimum of 100,000 USD, and a holder minimum of 50.",
        "operationId": "post_wallet_tokens_ts_many",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "days": {
                    "description": "Number of previous days to include in the data (from today's date).\nAllowed values range from 1 to 30, default to 2 weeks (14 days)",
                    "format": "int32",
                    "minimum": 0,
                    "nullable": true,
                    "type": "integer"
                  },
                  "vybeTokenFilter": {
                    "description": "Whether Vybe's token filter should restrict the tokens that are returned. If false, all priced tokens are included. Default is true.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "wallets": {
                    "description": "Wallets to include in the returned results (max 10).",
                    "items": {
                      "format": "pubkey",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "wallets"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "blockTime": {
                            "description": "The timestamp, rounded to the day, of which this account snapshot was taken",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "stakeValue": {
                            "description": "The value of staked SOL in USD",
                            "type": "string"
                          },
                          "stakeValueSol": {
                            "description": "The value of staked SOL in SOL",
                            "type": "string"
                          },
                          "systemValue": {
                            "description": "The value of held System SOL in USD",
                            "type": "string"
                          },
                          "tokenValue": {
                            "description": "Combined value of valid SPL tokens in USD.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "blockTime",
                          "tokenValue",
                          "stakeValue",
                          "systemValue",
                          "stakeValueSol"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ownerAddress": {
                      "format": "pubkey",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ownerAddress",
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Multi-wallet Balances Time-series",
        "tags": [
          "account"
        ]
      }
    },
    "/nft/collection-owners/{collectionAddress}": {
      "get": {
        "description": "Get the addresses of wallets that own NFT in specified collection. The amount of owners returned is limited to 1000 items.",
        "operationId": "get_collection_owners",
        "parameters": [
          {
            "description": "The public key (pubKey) associated with the Solana account.",
            "in": "path",
            "name": "collectionAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount of NFTs in this collection the address owns",
                            "format": "int64",
                            "type": "integer"
                          },
                          "owner": {
                            "description": "Address of collection owner",
                            "type": "string"
                          }
                        },
                        "required": [
                          "owner",
                          "amount"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "NFT Collection Owners",
        "tags": [
          "nft"
        ]
      }
    },
    "/price/markets": {
      "get": {
        "description": "Get all available market IDs that are queryable via the Vybe API.",
        "operationId": "get_markets",
        "parameters": [
          {
            "description": "Unique public key for a Solana program",
            "in": "query",
            "name": "programId",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Specifies the maximum number of markets to retrieve.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "baseTokenMint": {
                            "format": "pubkey",
                            "type": "string"
                          },
                          "baseTokenName": {
                            "description": "Name of the base token",
                            "nullable": true,
                            "type": "string"
                          },
                          "baseTokenSymbol": {
                            "description": "Ticker for the base token",
                            "nullable": true,
                            "type": "string"
                          },
                          "marketId": {
                            "format": "pubkey",
                            "type": "string"
                          },
                          "marketName": {
                            "description": "Name of the market",
                            "nullable": true,
                            "type": "string"
                          },
                          "programId": {
                            "format": "pubkey",
                            "type": "string"
                          },
                          "programName": {
                            "description": "Name of the program",
                            "nullable": true,
                            "type": "string"
                          },
                          "quoteTokenMint": {
                            "format": "pubkey",
                            "type": "string"
                          },
                          "quoteTokenName": {
                            "description": "Name of the quote token",
                            "nullable": true,
                            "type": "string"
                          },
                          "quoteTokenSymbol": {
                            "description": "Ticker for the quote token",
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedAt": {
                            "description": "Latest update Time",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "marketId",
                          "programId",
                          "baseTokenMint",
                          "quoteTokenMint",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Markets supported by our price endpoints."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Market not found"
          }
        },
        "summary": "Get Markets",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/programs": {
      "get": {
        "description": "Get all available DEXs' and AMMs' programs used for trades and prices.",
        "operationId": "get_programs",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "programId": {
                            "format": "pubkey",
                            "type": "string"
                          },
                          "programName": {
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "programId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Programs supported by our price endpoints."
          }
        },
        "summary": "DEX-AMM",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/pyth-accounts": {
      "get": {
        "description": "Retrieve a comprehensive list of all Pyth oracle price accounts along with their corresponding product accounts and symbols.",
        "operationId": "get_pyth_price_product_pairs",
        "parameters": [
          {
            "description": "Pyth product ID to filter over.",
            "in": "query",
            "name": "productId",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Pyth price feed ID to filter over.",
            "in": "query",
            "name": "priceFeedId",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "priceFeedId": {
                            "description": "The pubkey identifying the Pyth Price feed account.",
                            "type": "string"
                          },
                          "productId": {
                            "description": "The pubkey identifying the Pyth Product account.",
                            "type": "string"
                          },
                          "symbol": {
                            "description": "The Pyth asset symbol",
                            "type": "string"
                          }
                        },
                        "required": [
                          "productId",
                          "priceFeedId",
                          "symbol"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Pyth product"
          }
        },
        "summary": "Pyth Accounts",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/{baseMintAddress}+{quoteMintAddress}/pair-ohlcv": {
      "get": {
        "description": "Retrieve the trade price for a base/quote pair, based on the trades and swaps of our supported DEXs and AMMs.\nTrade price refers to the specific price at which a trade (buy or sell) is executed between two parties.",
        "operationId": "get_pair_trade_ohlcv_program",
        "parameters": [
          {
            "description": "Unique public key for a Solana program",
            "in": "query",
            "name": "programId",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1h, 1d, 1w, 1m, 1y, or a string parseable to seconds",
            "in": "query",
            "name": "resolution",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "resolution",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Start time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeStart",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeEnd",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Limit of the number of candles to return per page. Default is 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "baseMintAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "quoteMintAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found OHLCV data",
                      "items": {
                        "properties": {
                          "close": {
                            "description": "Close price",
                            "type": "string"
                          },
                          "count": {
                            "description": "Number of trades",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "high": {
                            "description": "High price",
                            "type": "string"
                          },
                          "low": {
                            "description": "Low price",
                            "type": "string"
                          },
                          "open": {
                            "description": "Open price",
                            "type": "string"
                          },
                          "time": {
                            "description": "OHLC time bucket start",
                            "type": "string"
                          },
                          "volume": {
                            "description": "Volume",
                            "type": "string"
                          }
                        },
                        "required": [
                          "time",
                          "open",
                          "high",
                          "low",
                          "close",
                          "volume",
                          "count"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Pair-OHLCV",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/{marketId}/market-ohlcv": {
      "get": {
        "description": "Get the OHLCV price for a unique trading pair or liquidity pool using the market ID.\nTrade price refers to the specific price at which a trade (buy or sell) is executed between two parties.",
        "operationId": "get_market_filtered_ohlcv",
        "parameters": [
          {
            "description": "The unique identifier assigned to a specific trading pair or market.",
            "in": "path",
            "name": "marketId",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 3h, 4h, 1d, 1w, 1mo, 1y. Default is \"1m\".",
            "in": "query",
            "name": "resolution",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "description": "Represents the supported time-window resolutions for queries.",
                  "enum": [
                    "1d",
                    "7d",
                    "30d"
                  ],
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Start time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeStart",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeEnd",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Specifies the maximum number of candles to retrieve within a given resolution. Default is 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found OHLCV data",
                      "items": {
                        "properties": {
                          "close": {
                            "type": "string"
                          },
                          "count": {
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "high": {
                            "type": "string"
                          },
                          "low": {
                            "type": "string"
                          },
                          "open": {
                            "type": "string"
                          },
                          "time": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "volume": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "time",
                          "open",
                          "high",
                          "low",
                          "close",
                          "volume",
                          "count"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Market-OHLCV",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/{mintAddress}/token-ohlcv": {
      "get": {
        "description": "Retrieve Open, High, Low, and Close (OHLC) for a token’s USD price based on aggregated trades for all USDC/USDT/PYUSD/WSOL markets.",
        "operationId": "get_token_trade_ohlc",
        "parameters": [
          {
            "description": "The public key of the token of interest",
            "in": "path",
            "name": "mintAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 3h, 4h, 1d, 1w, 1mo, 1y. Default is \"1h\".",
            "in": "query",
            "name": "resolution",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "description": "Represents the supported time-window resolutions for queries.",
                  "enum": [
                    "1d",
                    "7d",
                    "30d"
                  ],
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Start time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeStart",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeEnd",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Result page size specifier. Default is 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page number for paginated results",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found OHLCV data",
                      "items": {
                        "properties": {
                          "close": {
                            "description": "Close price",
                            "type": "string"
                          },
                          "count": {
                            "description": "Number of trades",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "high": {
                            "description": "High price",
                            "type": "string"
                          },
                          "low": {
                            "description": "Low price",
                            "type": "string"
                          },
                          "open": {
                            "description": "Open price",
                            "type": "string"
                          },
                          "time": {
                            "description": "OHLC time bucket start",
                            "type": "string"
                          },
                          "volume": {
                            "description": "Volume",
                            "type": "string"
                          },
                          "volumeUsd": {
                            "description": "Volume in USD",
                            "type": "string"
                          }
                        },
                        "required": [
                          "time",
                          "open",
                          "high",
                          "low",
                          "close",
                          "volume",
                          "volumeUsd",
                          "count"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Tokens info collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token-OHLCV",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/{priceFeedId}/pyth-price": {
      "get": {
        "description": "Access up-to-date pricing information through a Pyth Price feed on the Solana blockchain.",
        "operationId": "get_pyth_price",
        "parameters": [
          {
            "description": "The public key identifying the Pyth price feed account",
            "in": "path",
            "name": "priceFeedId",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "User-facing Pyth price feed update",
                  "properties": {
                    "confidence": {
                      "description": "Confidence interval of how close we think the true price is to the average.\nIt's influenced by both how sure each person quoting the price is, and how much they agree with each other.",
                      "type": "string"
                    },
                    "emac1H": {
                      "description": "Exponentially-weighted moving average confidence interval is a time-weighted average of the confidence interval",
                      "type": "string"
                    },
                    "emap1H": {
                      "description": "Exponentially-weighted moving average price is a time-weighted average of the aggregate price",
                      "type": "string"
                    },
                    "lastUpdated": {
                      "description": "The last updated time",
                      "format": "int64",
                      "type": "integer"
                    },
                    "price": {
                      "description": "Price of asset expressed in USD",
                      "type": "string"
                    },
                    "priceFeedAccount": {
                      "format": "pubkey",
                      "type": "string"
                    },
                    "validSlot": {
                      "description": "The last valid slot",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "priceFeedAccount",
                    "lastUpdated",
                    "validSlot",
                    "price",
                    "confidence",
                    "emac1H",
                    "emap1H"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Pyth price account"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Product not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Pyth Price",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/{priceFeedId}/pyth-price-ohlc": {
      "get": {
        "description": "Retrieve the Open, High, Low, and Close (OHLC) data from a Pyth Oracle price feed.",
        "operationId": "get_pyth_price_ohlc",
        "parameters": [
          {
            "description": "The public key identifying the Pyth price feed account",
            "in": "path",
            "name": "priceFeedId",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1h, 1d, 1w, 1m, 1y, or a string parseable to seconds",
            "in": "query",
            "name": "resolution",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "resolution",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Start time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeStart",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeEnd",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Limit of the number of records to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Pagination offset",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "avgConf": {
                            "description": "Average confidence",
                            "type": "string"
                          },
                          "avgPrice": {
                            "description": "Average price",
                            "type": "string"
                          },
                          "close": {
                            "description": "Close price",
                            "type": "string"
                          },
                          "high": {
                            "description": "High price",
                            "type": "string"
                          },
                          "low": {
                            "description": "Low price",
                            "type": "string"
                          },
                          "open": {
                            "description": "Open price",
                            "type": "string"
                          },
                          "timeBucketStart": {
                            "description": "Time bucket start",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "timeBucketStart",
                          "open",
                          "high",
                          "low",
                          "close",
                          "avgPrice",
                          "avgConf"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Pyth ohlc data"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Product not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Pyth Price OHLC",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/{priceFeedId}/pyth-price-ts": {
      "get": {
        "description": "Access real-time pricing data and historical oracle prices of a Pyth Price feed.",
        "operationId": "get_pyth_price_ts",
        "parameters": [
          {
            "description": "The public key identifying the Pyth price feed account",
            "in": "path",
            "name": "priceFeedId",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1h, 1d, 1w, 1m, 1y, or a string parseable to seconds",
            "in": "query",
            "name": "resolution",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "resolution",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Start time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeStart",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeEnd",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Limit of the number of records to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Pagination offset",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "User-facing Pyth price feed update",
                        "properties": {
                          "confidence": {
                            "description": "Confidence interval of how close we think the true price is to the average.\nIt's influenced by both how sure each person quoting the price is, and how much they agree with each other.",
                            "type": "string"
                          },
                          "emac1H": {
                            "description": "Exponentially-weighted moving average confidence interval is a time-weighted average of the confidence interval",
                            "type": "string"
                          },
                          "emap1H": {
                            "description": "Exponentially-weighted moving average price is a time-weighted average of the aggregate price",
                            "type": "string"
                          },
                          "lastUpdated": {
                            "description": "The last updated time",
                            "format": "int64",
                            "type": "integer"
                          },
                          "price": {
                            "description": "Price of asset expressed in USD",
                            "type": "string"
                          },
                          "priceFeedAccount": {
                            "format": "pubkey",
                            "type": "string"
                          },
                          "validSlot": {
                            "description": "The last valid slot",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "priceFeedAccount",
                          "lastUpdated",
                          "validSlot",
                          "price",
                          "confidence",
                          "emac1H",
                          "emap1H"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Pyth price account"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Product not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Pyth Price: Time Series",
        "tags": [
          "prices"
        ]
      }
    },
    "/price/{productId}/pyth-product": {
      "get": {
        "description": "Retrieve the metadata for a specific product using its Product ID from the Pyth network.",
        "operationId": "get_pyth_product",
        "parameters": [
          {
            "description": "The pubkey identifying the Pyth Product.",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "oneOf": [
                            {
                              "properties": {
                                "schedule": {
                                  "description": "Weekly schedule",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "schedule"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "umtf": {
                                  "description": "UMTF",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "umtf"
                              ],
                              "type": "object"
                            }
                          ]
                        }
                      ],
                      "nullable": true
                    },
                    {
                      "oneOf": [
                        {
                          "properties": {
                            "genericSymbol": {
                              "description": "Ticker symbol",
                              "type": "string"
                            }
                          },
                          "required": [
                            "genericSymbol"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "cmsSymbol": {
                              "description": "CMS market symbol",
                              "type": "string"
                            },
                            "cqsSymbol": {
                              "description": "CQS market symbol",
                              "type": "string"
                            },
                            "nasdaqSymbol": {
                              "description": "Nasdaq market symbol",
                              "type": "string"
                            }
                          },
                          "required": [
                            "cmsSymbol",
                            "cqsSymbol",
                            "nasdaqSymbol"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    {
                      "properties": {
                        "assetType": {
                          "description": "The asset class: Crypto, Equity, FX, Metal, Rates, Commodities",
                          "type": "string"
                        },
                        "base": {
                          "description": "Base asset. Can be present for everything except rates and commodities.",
                          "nullable": true,
                          "type": "string"
                        },
                        "country": {
                          "description": "The country code. Can be present for equity only.",
                          "nullable": true,
                          "type": "string"
                        },
                        "description": {
                          "description": "Pair name",
                          "type": "string"
                        },
                        "productId": {
                          "description": "The pubkey identifying the Pyth Product.",
                          "type": "string"
                        },
                        "quote": {
                          "description": "Quote currency. Can be present for everything except rates and commodities.",
                          "nullable": true,
                          "type": "string"
                        },
                        "symbol": {
                          "description": "Pyth asset symbol",
                          "type": "string"
                        },
                        "tenor": {
                          "description": "The tenor. Can be present for FX or equity only.",
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "productId",
                        "description",
                        "symbol",
                        "assetType"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Structure corresponding to what we will fetch in the API\nThis is saved to a json file"
                }
              }
            },
            "description": "Pyth product"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Product not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Pyth Product",
        "tags": [
          "prices"
        ]
      }
    },
    "/program/known-program-accounts": {
      "get": {
        "description": "Retrieve a categorized list of labeled programs.\nLabeled programs are categorized by their product sector (NFT, perps etc.).\nEntity names refer to the business or organization that owns one more programs.",
        "operationId": "get_known_program_accounts",
        "parameters": [
          {
            "description": "Unique public key for a Solana program",
            "in": "query",
            "name": "programId",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Known program name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Labels to filter over. Only programs matching all labels will be returned (eg. labels=DEFI,NFT)",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            }
          },
          {
            "description": "Name of the business or entity that controls this program",
            "in": "query",
            "name": "entityName",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Entity id to filter with (including as empty or null, such as \"entity_id=\" will filter programs without an entity_id)",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Sort by ascending. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort by descending. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "programs": {
                      "description": "List of found programs",
                      "items": {
                        "properties": {
                          "dateAdded": {
                            "description": "Date added to the database",
                            "format": "date-time",
                            "type": "string"
                          },
                          "defiLlamaId": {
                            "description": "Program DeFi Llama ID",
                            "nullable": true,
                            "type": "string"
                          },
                          "entityId": {
                            "description": "Program entity ID",
                            "format": "int32",
                            "nullable": true,
                            "type": "integer"
                          },
                          "entityName": {
                            "description": "Name of the business or entity that controls this program",
                            "nullable": true,
                            "type": "string"
                          },
                          "idlUrl": {
                            "description": "Program IDL URL",
                            "nullable": true,
                            "type": "string"
                          },
                          "labels": {
                            "description": "Program labels, eg: DEFI,NFT",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "logoUrl": {
                            "description": "Program logo URL",
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Program name",
                            "nullable": true,
                            "type": "string"
                          },
                          "programDescription": {
                            "description": "Program description",
                            "nullable": true,
                            "type": "string"
                          },
                          "programDetail": {
                            "description": "Program detail",
                            "nullable": true,
                            "type": "string"
                          },
                          "programId": {
                            "description": "Program ID",
                            "type": "string"
                          },
                          "siteUrl": {
                            "description": "Program site URL",
                            "nullable": true,
                            "type": "string"
                          },
                          "twitterUrl": {
                            "description": "Twiiter url for the program account",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "programId",
                          "labels",
                          "dateAdded"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "programs"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Tokens info collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data could be found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Known Program Accounts",
        "tags": [
          "programs"
        ]
      }
    },
    "/program/ranking": {
      "get": {
        "description": "Retrieve the program IDs with ranks.",
        "operationId": "ranking",
        "parameters": [
          {
            "description": "Limit the number of programs - default is 10",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Interval between the ranks - default is 1 day\nPossible values: '1d', '7d' or '30d'",
            "in": "query",
            "name": "interval",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The date to return the ranks for in unix timestamp - default is the current date",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "format": "int64",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "The Ranked programs",
                      "items": {
                        "properties": {
                          "programId": {
                            "description": "Program address in base 58 format",
                            "type": "string"
                          },
                          "programName": {
                            "description": "Program Name - null if we dont have it in the dict",
                            "nullable": true,
                            "type": "string"
                          },
                          "programRank": {
                            "description": "Program rank for the day",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "score": {
                            "description": "rank score after calculation",
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "required": [
                          "programRank",
                          "programId",
                          "score"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "date": {
                      "description": "The epoch used to get the ranks for",
                      "format": "int64",
                      "type": "integer"
                    },
                    "interval": {
                      "description": "Interval between the ranks - Possible values: '1d', '7d' or '30d'",
                      "type": "string"
                    },
                    "limit": {
                      "description": "The number of ranks returned",
                      "format": "int32",
                      "minimum": 0,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "date",
                    "interval",
                    "limit",
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Top program ranks"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Ranking",
        "tags": [
          "programs"
        ]
      }
    },
    "/program/{programAddress}": {
      "get": {
        "description": "Get details for a Solana program, including its name, entity, label category, instruction/transaction counts, and daily active users",
        "operationId": "get_program",
        "parameters": [
          {
            "description": "The public key of the program of interest",
            "in": "path",
            "name": "programAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dau": {
                      "description": "Unique fee payers in the last day",
                      "format": "int64",
                      "nullable": true,
                      "type": "integer"
                    },
                    "entityName": {
                      "description": "Name of the business or entity that controls this program",
                      "nullable": true,
                      "type": "string"
                    },
                    "friendlyName": {
                      "description": "Friendly name",
                      "nullable": true,
                      "type": "string"
                    },
                    "idlUrl": {
                      "description": "Program IDL URL",
                      "nullable": true,
                      "type": "string"
                    },
                    "instructions1d": {
                      "description": "Instruction count in 1 day",
                      "format": "int64",
                      "nullable": true,
                      "type": "integer"
                    },
                    "labels": {
                      "description": "Labels to filter over. Only programs matching all labels will be returned (eg. labels=DEFI,NFT)",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    },
                    "logoUrl": {
                      "description": "Program logo URL",
                      "nullable": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Program name",
                      "nullable": true,
                      "type": "string"
                    },
                    "newUsersChange1d": {
                      "description": "1 day change in DAU",
                      "format": "int64",
                      "nullable": true,
                      "type": "integer"
                    },
                    "programDescription": {
                      "description": "Program description",
                      "nullable": true,
                      "type": "string"
                    },
                    "programDetail": {
                      "description": "Program detail",
                      "nullable": true,
                      "type": "string"
                    },
                    "programId": {
                      "description": "Program ID",
                      "type": "string"
                    },
                    "transactions1d": {
                      "description": "Total transactions in 1 day",
                      "format": "int64",
                      "nullable": true,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "programId"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful output"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Programs Details",
        "tags": [
          "programs"
        ]
      }
    },
    "/program/{programAddress}/active-users": {
      "get": {
        "description": "Get active users with instruction and transaction count for particular program",
        "operationId": "get_program_active_users",
        "parameters": [
          {
            "description": "The public key of the program of interest",
            "in": "path",
            "name": "programAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of previous days to include in the data (from today's date).\nAllowed values range from 1 to 30, default to 2 weeks (14 days)",
            "in": "query",
            "name": "days",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Limit the number of results. Default is 1000",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Sort list ascending. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort by descending. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found active users",
                      "items": {
                        "properties": {
                          "instructions": {
                            "description": "Amount of instructions triggered by the user",
                            "format": "int64",
                            "type": "integer"
                          },
                          "programId": {
                            "description": "Id of requested program",
                            "type": "string"
                          },
                          "transactions": {
                            "description": "Amount of transactions triggered by the user",
                            "format": "int64",
                            "type": "integer"
                          },
                          "wallet": {
                            "description": "User's wallet id",
                            "type": "string"
                          }
                        },
                        "required": [
                          "programId",
                          "wallet",
                          "transactions",
                          "instructions"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful output"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Program Active Users",
        "tags": [
          "programs"
        ]
      }
    },
    "/program/{programAddress}/active-users-ts": {
      "get": {
        "description": "Retrieve time series data tracking the number of active users for a specified program.\nThis endpoint provides insights into the program's user engagement over time.",
        "operationId": "get_program_active_users_count",
        "parameters": [
          {
            "description": "The public key of the program of interest",
            "in": "path",
            "name": "programAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Range of the data of format '{value}{unit}', which will return the most recent\ninterval with the given unit as the resolution.\nPossible values: '1h' up to '24h' or '1d' up to '30d'",
            "in": "query",
            "name": "range",
            "required": true,
            "schema": {
              "format": "recent_range",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "blockTime": {
                            "description": "Block time",
                            "format": "int64",
                            "type": "integer"
                          },
                          "dau": {
                            "description": "Count of unique fee payers in the selected resolution",
                            "format": "int64",
                            "type": "integer"
                          },
                          "programId": {
                            "description": "Unique public key for a Solana program",
                            "type": "string"
                          }
                        },
                        "required": [
                          "programId",
                          "dau",
                          "blockTime"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful output"
          },
          "404": {
            "description": "No data matches provided query"
          }
        },
        "summary": "Active Users: Time Series",
        "tags": [
          "programs"
        ]
      }
    },
    "/program/{programAddress}/instructions-count-ts": {
      "get": {
        "description": "Access time series data tracking the instruction count for a specific program.\nThis endpoint provides a historical overview of the number of instructions executed within the program, enabling analysis of program activity and complexity over time.",
        "operationId": "get_program_instructions_count",
        "parameters": [
          {
            "description": "The public key of the program of interest",
            "in": "path",
            "name": "programAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Range of the data of format '{value}{unit}', which will return the most recent\ninterval with the given unit as the resolution.\nPossible values: '1h' up to '24h' or '1d' up to '30d'",
            "in": "query",
            "name": "range",
            "required": true,
            "schema": {
              "format": "recent_range",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found instructions count",
                      "items": {
                        "properties": {
                          "blockTime": {
                            "description": "Block time",
                            "format": "int64",
                            "type": "integer"
                          },
                          "instructionsCount": {
                            "description": "Instructions count",
                            "format": "int64",
                            "type": "integer"
                          },
                          "programId": {
                            "description": "Unique public key for a Solana program",
                            "type": "string"
                          }
                        },
                        "required": [
                          "programId",
                          "instructionsCount",
                          "blockTime"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful output"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Instruction Count: Time Series",
        "tags": [
          "programs"
        ]
      }
    },
    "/program/{programAddress}/transactions-count-ts": {
      "get": {
        "description": "Access time series data tracking the transaction count for a specific program.\nThis endpoint provides a historical overview of transaction activity within the program, enabling analysis of transaction trends and patterns over time.",
        "operationId": "get_program_transactions_count",
        "parameters": [
          {
            "description": "The public key of the program of interest",
            "in": "path",
            "name": "programAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Range of the data of format '{value}{unit}', which will return the most recent\ninterval with the given unit as the resolution.\nPossible values: '1h' up to '24h' or '1d' up to '30d'",
            "in": "query",
            "name": "range",
            "required": true,
            "schema": {
              "format": "recent_range",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found transactions count",
                      "items": {
                        "properties": {
                          "blockTime": {
                            "description": "Block time",
                            "format": "int64",
                            "type": "integer"
                          },
                          "programId": {
                            "description": "Unique public key for a Solana program",
                            "type": "string"
                          },
                          "transactionsCount": {
                            "description": "Transactions count",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "programId",
                          "transactionsCount",
                          "blockTime"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful output"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Transaction Count: Time Series",
        "tags": [
          "programs"
        ]
      }
    },
    "/program/{programAddress}/tvl": {
      "get": {
        "description": "Get tvl time series for particular program",
        "operationId": "get_program_tvl",
        "parameters": [
          {
            "description": "The public key of the program of interest",
            "in": "path",
            "name": "programAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1h, 1d, 1w or a string parseable to seconds",
            "in": "query",
            "name": "resolution",
            "required": true,
            "schema": {
              "format": "resolution",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found TVLs for program",
                      "items": {
                        "properties": {
                          "time": {
                            "description": "time as TIMESTAMPTZ",
                            "format": "date-time",
                            "type": "string"
                          },
                          "tvl": {
                            "description": "Programs TVL",
                            "type": "string"
                          }
                        },
                        "required": [
                          "tvl",
                          "time"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful output"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Program TVL",
        "tags": [
          "programs"
        ]
      }
    },
    "/programs": {
      "get": {
        "description": "Get a list of all Solana programs that have their IDLs on-chain. Sort programs by our labeled categories or by daily active users.",
        "operationId": "get_programs_list",
        "parameters": [
          {
            "description": "Filter programs by labels.. Only accounts matching a label will be returned (eg. labels=DEFI,NFT)\nNote: unlike other endpoints, this endpoint will return programs that match any of the labels, not all of them\nThis is subject to change in the future",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            }
          },
          {
            "description": "Limit the number of results for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Sort ascending by 'dau', 'name', 'transactions1d' or 'instructions1d'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort descending by 'dau', 'name', 'transactions1d' or 'instructions1d'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "dau": {
                            "description": "Unique fee payers in the last day",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          },
                          "entityName": {
                            "description": "Name of the business or entity that controls this program",
                            "nullable": true,
                            "type": "string"
                          },
                          "friendlyName": {
                            "description": "Friendly name",
                            "nullable": true,
                            "type": "string"
                          },
                          "idlUrl": {
                            "description": "Program IDL URL",
                            "nullable": true,
                            "type": "string"
                          },
                          "instructions1d": {
                            "description": "Instruction count in 1 day",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          },
                          "labels": {
                            "description": "Labels to filter over. Only programs matching all labels will be returned (eg. labels=DEFI,NFT)",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          },
                          "logoUrl": {
                            "description": "Program logo URL",
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Program name",
                            "nullable": true,
                            "type": "string"
                          },
                          "newUsersChange1d": {
                            "description": "1 day change in DAU",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          },
                          "programDescription": {
                            "description": "Program description",
                            "nullable": true,
                            "type": "string"
                          },
                          "programDetail": {
                            "description": "Program detail",
                            "nullable": true,
                            "type": "string"
                          },
                          "programId": {
                            "description": "Program ID",
                            "type": "string"
                          },
                          "transactions1d": {
                            "description": "Total transactions in 1 day",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "programId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful output"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Programs List",
        "tags": [
          "programs"
        ]
      }
    },
    "/token/instruction-names": {
      "get": {
        "description": "This endpoint retrieves a comprehensive list of instruction names derived from our discriminants. It provides a convenient method to find and understand the various token transfer instructions available across Solana programs.",
        "operationId": "get_token_instruction_names",
        "parameters": [
          {
            "description": "Fuzzy search for similar instructions based on your input.",
            "in": "query",
            "name": "ixName",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Enter the discriminant for a direct instruction name match.",
            "in": "query",
            "name": "callingInstructions",
            "required": false,
            "schema": {
              "format": "binary",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Return all the instructions for this program id",
            "in": "query",
            "name": "callingProgram",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Return all the instructions for this program name",
            "in": "query",
            "name": "programName",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "callingInstructions": {
                            "format": "binary",
                            "type": "string"
                          },
                          "callingProgram": {
                            "type": "string"
                          },
                          "ixName": {
                            "type": "string"
                          },
                          "programName": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "callingInstructions",
                          "ixName",
                          "callingProgram",
                          "programName"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "A list of Solana program instructions matching the query"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data matches provided query"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Instruction Names",
        "tags": [
          "tokens"
        ]
      }
    },
    "/token/trades": {
      "get": {
        "description": "Access data for trades executed within a program. By default, this is from all aggregated programs and markets within the last 14 days.",
        "operationId": "get_trade_data_program",
        "parameters": [
          {
            "description": "The program on which the trade occurred",
            "in": "query",
            "name": "programId",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "The public key of the base token",
            "in": "query",
            "name": "baseMintAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "The public key of the quote token",
            "in": "query",
            "name": "quoteMintAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "The public key of either the base or quote token",
            "in": "query",
            "name": "mintAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Market id to filter with. If provided, the baseMintAddress and quoteMintAddress fields are ignored",
            "in": "query",
            "name": "marketId",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Authority public key to filter with",
            "in": "query",
            "name": "authorityAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Resolution of the data. Possible values: 1h, 1d, 1w, 1m, 1y, or a string parseable to seconds",
            "in": "query",
            "name": "resolution",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "resolution",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Start time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeStart",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeEnd",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Limit of the number of trades to return per page. Default/max is 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Sort ascending by 'price' or 'blocktime'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort descending by 'price' or 'blocktime'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The public key of the entity that pays for the trade, often used for retrieving trades associated with a specific trading account.",
            "in": "query",
            "name": "feePayer",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Found trade data",
                      "items": {
                        "properties": {
                          "authorityAddress": {
                            "description": "The public key of the signer who authorized the trade.",
                            "type": "string"
                          },
                          "baseMintAddress": {
                            "description": "The mint address of the base token involved in the trade.",
                            "type": "string"
                          },
                          "baseSize": {
                            "description": "The quantity of the base token involved in the trade.",
                            "type": "string"
                          },
                          "blockTime": {
                            "description": "The Unix timestamp at which the trade occurred on the blockchain.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "fee": {
                            "description": "The amount of fees paid for the trade.",
                            "type": "string"
                          },
                          "feePayer": {
                            "description": "The public key of the account responsible for paying the transaction fees.",
                            "type": "string"
                          },
                          "iixOrdinal": {
                            "description": "The location of the trade inner ix inside the transaction. 255 is returned if not applicable.",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "interIxOrdinal": {
                            "description": "The location of the trade inside an ix (in 2 hop swaps). 255 is returned if not applicable.",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "ixOrdinal": {
                            "description": "The location of the trade ix inside the transaction.",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "marketId": {
                            "description": "The identifier for the market pair, e.g., SOL/USDC, where the trade took place.",
                            "type": "string"
                          },
                          "price": {
                            "description": "The price of one unit of the base token, expressed in terms of the quote token.",
                            "type": "string"
                          },
                          "programId": {
                            "description": "The public key of the AMM or DEX program that facilitated the trade.",
                            "type": "string"
                          },
                          "quoteMintAddress": {
                            "description": "The mint address of the quote token used in the trade.",
                            "type": "string"
                          },
                          "quoteSize": {
                            "description": "The amount of the quote token exchanged in the trade.",
                            "type": "string"
                          },
                          "signature": {
                            "description": "The unique identifier of the transaction signature on the blockchain.",
                            "type": "string"
                          },
                          "slot": {
                            "description": "Slot of the trade",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "txIndex": {
                            "description": "The transaction index of the trade.",
                            "format": "int32",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "authorityAddress",
                          "blockTime",
                          "iixOrdinal",
                          "baseMintAddress",
                          "interIxOrdinal",
                          "ixOrdinal",
                          "marketId",
                          "quoteMintAddress",
                          "price",
                          "programId",
                          "signature",
                          "slot",
                          "txIndex",
                          "fee",
                          "feePayer",
                          "baseSize",
                          "quoteSize"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Trades",
        "tags": [
          "tokens"
        ]
      }
    },
    "/token/transfers": {
      "get": {
        "description": "Retrieve a comprehensive list of token transfer transactions, offering versatile filtering options based on\ntransaction signature, calling program, source and destination owners, mintAddress address, time range,\nand amount range.",
        "operationId": "get_token_transfers",
        "parameters": [
          {
            "description": "The public key of the token of interest",
            "in": "query",
            "name": "mintAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Signature of the transaction",
            "in": "query",
            "name": "signature",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The public key of the Calling program",
            "in": "query",
            "name": "callingProgram",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Sender’s token account",
            "in": "query",
            "name": "senderTokenAccount",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Sender’s public key",
            "in": "query",
            "name": "senderAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Receiver’s token account",
            "in": "query",
            "name": "receiverTokenAccount",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Receiver’s public key",
            "in": "query",
            "name": "receiverAddress",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Fee payer's public key",
            "in": "query",
            "name": "feePayer",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "format": "pubkey",
                  "type": "string"
                }
              ],
              "nullable": true
            }
          },
          {
            "description": "Lower bound of the amount to filter with",
            "in": "query",
            "name": "minAmount",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Upper bound of the amount to filter with",
            "in": "query",
            "name": "maxAmount",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Start time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeStart",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of the data to return (unix timestamp)",
            "in": "query",
            "name": "timeEnd",
            "required": false,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Limit of the number of transfers to return per page. Default/max is 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Sort ascending by 'amount', 'slot', or 'blockTime'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort descending by 'amount', 'slot', or 'blockTime'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transfers": {
                      "description": "Found transfer data",
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "The total number of tokens involved in the transaction.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "blockTime": {
                            "description": "The timestamp when the transaction was confirmed on the blockchain, in Unix time.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "calculatedAmount": {
                            "description": "The resulting amount after applying the `decimal` to the `amount` value.",
                            "type": "string"
                          },
                          "callingMetadata": {
                            "description": "The public key of the Solana program that initiated the transaction.",
                            "items": {
                              "properties": {
                                "callingInstructions": {
                                  "format": "binary",
                                  "type": "string"
                                },
                                "callingProgram": {
                                  "type": "string"
                                },
                                "ixName": {
                                  "type": "string"
                                },
                                "programName": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "callingInstructions",
                                "ixName",
                                "callingProgram",
                                "programName"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "decimal": {
                            "description": "The number of decimal places used for the token's smallest unit.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "feePayer": {
                            "description": "The public key of the account responsible for paying the transaction fees.",
                            "type": "string"
                          },
                          "mintAddress": {
                            "description": "The public key of the token's mint, specifying the token type involved in the transaction.",
                            "type": "string"
                          },
                          "price": {
                            "description": "Price of the token involved in the transaction (e.g. `mint_address`) expressed in USD.",
                            "type": "string"
                          },
                          "receiverAddress": {
                            "description": "The public key of the account receiving the tokens.",
                            "nullable": true,
                            "type": "string"
                          },
                          "receiverTokenAccount": {
                            "description": "The public key of the specific token account of the receiver.",
                            "nullable": true,
                            "type": "string"
                          },
                          "senderAddress": {
                            "description": "The public key of the account sending the tokens.",
                            "type": "string"
                          },
                          "senderTokenAccount": {
                            "description": "The public key of the specific token account of the sender.",
                            "nullable": true,
                            "type": "string"
                          },
                          "signature": {
                            "description": "The cryptographic signature that uniquely identifies the transaction on the blockchain.",
                            "type": "string"
                          },
                          "slot": {
                            "description": "The slot number in which the transaction was processed on the Solana blockchain, helping to pinpoint the exact sequence of events.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "valueUsd": {
                            "description": "Calculated total USD value of the transfer based on the `amount`, `decimal`, and `price` values.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "signature",
                          "callingMetadata",
                          "senderAddress",
                          "mintAddress",
                          "feePayer",
                          "decimal",
                          "amount",
                          "slot",
                          "blockTime",
                          "price",
                          "calculatedAmount",
                          "valueUsd"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "transfers"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Tokens info collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Transfers",
        "tags": [
          "tokens"
        ]
      }
    },
    "/token/{mintAddress}": {
      "get": {
        "description": "Retrieves details of the specified token.\n\nUseful for overview of a token's past 24 hours' activity.",
        "operationId": "get_token_details",
        "parameters": [
          {
            "description": "The public key of the token of interest",
            "in": "path",
            "name": "mintAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "category": {
                      "description": "Category of the token",
                      "nullable": true,
                      "type": "string"
                    },
                    "currentSupply": {
                      "description": "Current token supply",
                      "format": "double",
                      "type": "number"
                    },
                    "decimal": {
                      "description": "Decimal places",
                      "format": "int32",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "logoUrl": {
                      "description": "Logo associated with the token",
                      "nullable": true,
                      "type": "string"
                    },
                    "marketCap": {
                      "description": "Current token market cap",
                      "format": "double",
                      "type": "number"
                    },
                    "mintAddress": {
                      "description": "The public key of the token of interest",
                      "type": "string"
                    },
                    "name": {
                      "description": "Token mint name",
                      "nullable": true,
                      "type": "string"
                    },
                    "price": {
                      "description": "Current price in USD",
                      "format": "double",
                      "type": "number"
                    },
                    "price1d": {
                      "description": "Price in USD of the token 1 day ago",
                      "format": "double",
                      "type": "number"
                    },
                    "price7d": {
                      "description": "Price in USD of the token 7 days ago",
                      "format": "double",
                      "type": "number"
                    },
                    "subcategory": {
                      "description": "Subcategory of the token",
                      "nullable": true,
                      "type": "string"
                    },
                    "symbol": {
                      "description": "Token mint symbol",
                      "type": "string"
                    },
                    "tokenAmountVolume24h": {
                      "description": "Token volume transferred in past 24 hours",
                      "format": "double",
                      "nullable": true,
                      "type": "number"
                    },
                    "updateTime": {
                      "description": "Time of last update of price",
                      "format": "int64",
                      "type": "integer"
                    },
                    "usdValueVolume24h": {
                      "description": "Token volume transferred in past 24 hours USD value",
                      "format": "double",
                      "nullable": true,
                      "type": "number"
                    },
                    "verified": {
                      "description": "Verified status of the token",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "symbol",
                    "mintAddress",
                    "price",
                    "price1d",
                    "price7d",
                    "decimal",
                    "verified",
                    "updateTime",
                    "currentSupply",
                    "marketCap"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Token details collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data matches provided query"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Details",
        "tags": [
          "tokens"
        ]
      }
    },
    "/token/{mintAddress}/holders-ts": {
      "get": {
        "description": "Retrieves number of token holders at selected interval for the specified token.\n\nUseful for viewing the trend of token holders over given period.\n\nCurrently, only daily aggregation is supported.",
        "operationId": "get_token_holders_time_series",
        "parameters": [
          {
            "description": "The public key of the token of interest",
            "in": "path",
            "name": "mintAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Start time of period of interest as a unix timestamp.",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "format": "int64",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of period of interest as a unix timestamp.",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "format": "int64",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Time interval specifier (currently, only \"day\" or \"hour\" is supported).",
            "in": "query",
            "name": "interval",
            "required": false,
            "schema": {
              "description": "Enumerates the supported time intervals for token holders.",
              "enum": [
                "hour",
                "day"
              ],
              "type": "string"
            }
          },
          {
            "description": "Result page size specifier.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "Token holders time series data.",
                      "items": {
                        "properties": {
                          "holdersTimestamp": {
                            "description": "Unix timestamp of the record.",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nDust": {
                            "description": "Number of dust accounts at the instant. (< 100 tokens)",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nHolders": {
                            "description": "Number of token holders at the instant.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nLarge": {
                            "description": "Number of large accounts at the instant. (between 10000 and 100000 tokens)",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nMedium": {
                            "description": "Number of medium accounts at the instant. (between 1000 and 10000 tokens)",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nSmall": {
                            "description": "Number of small accounts at the instant. (between 100 and 1000 tokens)",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nWhale": {
                            "description": "Number of whale accounts at the instant. (> 100000 tokens)",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "holdersTimestamp",
                          "nHolders",
                          "nDust",
                          "nSmall",
                          "nMedium",
                          "nLarge",
                          "nWhale"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Token holder numbers collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data matches provided query"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Holders Time Series",
        "tags": [
          "tokens"
        ]
      }
    },
    "/token/{mintAddress}/top-holders": {
      "get": {
        "description": "Retrieves the top 1,000 token holders. Data is updated every three hours\n\nAllows sorting based on token holder fields: rank, ownerName, ownerAddress, valueUsd, balance and percentageOfSupplyHeld.\n\nUseful for overview of a token's top holders",
        "operationId": "get_top_holders",
        "parameters": [
          {
            "description": "The public key of the token of interest",
            "in": "path",
            "name": "mintAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Limit of the number of transfers to return per page. Default/max is 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Sort ascending by 'rank', 'ownerName', 'ownerAddress', 'valueUsd', 'balance' or 'percentageOfSupplyHeld'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Sort descending by 'rank', 'ownerName', 'ownerAddress', 'valueUsd', 'balance' or 'percentageOfSupplyHeld'. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "balance": {
                            "description": "Current Token Amount",
                            "type": "string"
                          },
                          "ownerAddress": {
                            "description": "Holder address",
                            "type": "string"
                          },
                          "ownerLogoUrl": {
                            "description": "Holder logo url",
                            "nullable": true,
                            "type": "string"
                          },
                          "ownerName": {
                            "description": "Holder name",
                            "nullable": true,
                            "type": "string"
                          },
                          "percentageOfSupplyHeld": {
                            "description": "Percentage of supply held",
                            "format": "double",
                            "type": "number"
                          },
                          "rank": {
                            "description": "Rank",
                            "format": "int64",
                            "type": "integer"
                          },
                          "tokenLogoUrl": {
                            "description": "Logo Url of the token of interest",
                            "nullable": true,
                            "type": "string"
                          },
                          "tokenMint": {
                            "description": "The public key of the token of interest",
                            "type": "string"
                          },
                          "tokenSymbol": {
                            "description": "Symbol of the token of interest",
                            "nullable": true,
                            "type": "string"
                          },
                          "valueUsd": {
                            "description": "Value Usd",
                            "type": "string"
                          }
                        },
                        "required": [
                          "rank",
                          "ownerAddress",
                          "tokenMint",
                          "balance",
                          "valueUsd",
                          "percentageOfSupplyHeld"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Token details collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data matches provided query"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Top Token Holders",
        "tags": [
          "tokens"
        ]
      }
    },
    "/token/{mintAddress}/transfer-volume": {
      "get": {
        "description": "Retrieves the token volume in USD, transferred over the specified period at selected intervals for the specified token.\n\nUseful for viewing the trend of token volume transferred over the given period.",
        "operationId": "get_token_volume_time_series",
        "parameters": [
          {
            "description": "The public key of the token of interest",
            "in": "path",
            "name": "mintAddress",
            "required": true,
            "schema": {
              "format": "pubkey",
              "type": "string"
            }
          },
          {
            "description": "Start time of period of interest as a unix timestamp.",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": {
              "format": "int64",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "End time of period of interest as a unix timestamp.",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": {
              "format": "int64",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Time interval specifier.",
            "in": "query",
            "name": "interval",
            "required": false,
            "schema": {
              "description": "Enumerates the supported time intervals for token holders.",
              "enum": [
                "hour",
                "day"
              ],
              "type": "string"
            }
          },
          {
            "description": "Result page size specifier.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount transferred of the token.",
                            "type": "string"
                          },
                          "timeBucketStart": {
                            "description": "Time interval start time.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "volume": {
                            "description": "Volume transferred of the token in USD.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "timeBucketStart",
                          "volume",
                          "amount"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Token volume in USD in provided intervals for period"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data matches provided query"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Token Volume Time Series",
        "tags": [
          "tokens"
        ]
      }
    },
    "/tokens": {
      "get": {
        "description": "Retrieves a list of tracked tokens.\n\nAllows sorting based on token fields: mintAddress, currentSupply, marketCap, name, price and symbol.\n\nUseful for overview of past 24 hours' activity of listed tokens.\n\nResults are paginated via page query parameter.",
        "operationId": "get_tokens_summary",
        "parameters": [
          {
            "description": "Optional ascending sort field specification. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByAsc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Optional descending sort field specification. Only one of sort_by_asc or sort_by_desc can be used",
            "in": "query",
            "name": "sortByDesc",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Result page size specifier.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "description": "Page selection, 0-indexed.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "category": {
                            "description": "Category of the token",
                            "nullable": true,
                            "type": "string"
                          },
                          "currentSupply": {
                            "description": "Current token supply",
                            "format": "double",
                            "type": "number"
                          },
                          "decimal": {
                            "description": "Decimal places",
                            "format": "int32",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "logoUrl": {
                            "description": "Logo associated with the token",
                            "nullable": true,
                            "type": "string"
                          },
                          "marketCap": {
                            "description": "Current token market cap",
                            "format": "double",
                            "type": "number"
                          },
                          "mintAddress": {
                            "description": "The public key of the token of interest",
                            "type": "string"
                          },
                          "name": {
                            "description": "Token mint name",
                            "nullable": true,
                            "type": "string"
                          },
                          "price": {
                            "description": "Current price in USD",
                            "format": "double",
                            "type": "number"
                          },
                          "price1d": {
                            "description": "Price in USD of the token 1 day ago",
                            "format": "double",
                            "type": "number"
                          },
                          "price7d": {
                            "description": "Price in USD of the token 7 days ago",
                            "format": "double",
                            "type": "number"
                          },
                          "subcategory": {
                            "description": "Subcategory of the token",
                            "nullable": true,
                            "type": "string"
                          },
                          "symbol": {
                            "description": "Token mint symbol",
                            "type": "string"
                          },
                          "tokenAmountVolume24h": {
                            "description": "Token volume transferred in past 24 hours",
                            "format": "double",
                            "nullable": true,
                            "type": "number"
                          },
                          "updateTime": {
                            "description": "Time of last update of price",
                            "format": "int64",
                            "type": "integer"
                          },
                          "usdValueVolume24h": {
                            "description": "Token volume transferred in past 24 hours USD value",
                            "format": "double",
                            "nullable": true,
                            "type": "number"
                          },
                          "verified": {
                            "description": "Verified status of the token",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "symbol",
                          "mintAddress",
                          "price",
                          "price1d",
                          "price7d",
                          "decimal",
                          "verified",
                          "updateTime",
                          "currentSupply",
                          "marketCap"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Tokens summary collected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Invalid request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "No data matches provided query"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Code ID of the error, uniquely identifying the error type",
                      "format": "int32",
                      "type": "integer"
                    },
                    "id": {
                      "description": "A unique identifier for the error, representing the error ID in Sentry.\nThis should be submitted as a reference when contacting support.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message describing the error that occurred.",
                      "type": "string"
                    },
                    "violations": {
                      "description": "Optional collection of validation violations representations.",
                      "items": {
                        "description": "Main structure to represent any kind of validation violation.",
                        "properties": {
                          "invalidValue": {
                            "description": "Provided value which leaded to the violation.",
                            "nullable": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "Message to the end user.",
                            "type": "string"
                          },
                          "propertyPath": {
                            "description": "Property path to the field where violation occurred.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "message"
                        ],
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "code",
                    "message",
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Tokens",
        "tags": [
          "tokens"
        ]
      }
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "servers": [
    {
      "description": "Alpha Vybe API",
      "url": "https://api.vybenetwork.xyz/"
    }
  ]
}